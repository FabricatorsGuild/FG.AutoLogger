/*******************************************************************************************
*  This class is autogenerated from the class WebApiLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using WebApiService.Diagnostics;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;
using CodeEffect.Diagnostics.EventSourceGenerator.AI;


namespace WebApiService
{
	internal sealed class WebApiLogger : IWebApiLogger
	{
		private readonly System.Fabric.StatelessServiceContext _context;
		private readonly Microsoft.ApplicationInsights.TelemetryClient _telemetryClient;

		public WebApiLogger(
			System.Fabric.StatelessServiceContext context)
		{
			_context = context;
			
            _telemetryClient = new Microsoft.ApplicationInsights.TelemetryClient();
            _telemetryClient.Context.User.Id = Environment.UserName;
            _telemetryClient.Context.Session.Id = Guid.NewGuid().ToString();
            _telemetryClient.Context.Device.OperatingSystem = Environment.OSVersion.ToString();

		}

		public void ActivatingController(
			string correlationId,
			string userId)
		{
			WebApiServiceEventSource.Current.ActivatingController(
				_context, 
				correlationId, 
				userId
			);
			_telemetryClient.TrackEvent(
	            nameof(ActivatingController),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.InstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"CorrelationId", correlationId},
                    {"UserId", userId}
	            });
    
		}



		public void StartGetAll(
			)
		{
			WebApiServiceEventSource.Current.StartGetAll(
				_context
			);

			var getAllOperationHolder = _telemetryClient.StartOperation<RequestTelemetry>("getAll");
	       getAllOperationHolder.Telemetry.Properties.Add("ServiceName", _context.ServiceName.ToString());
			getAllOperationHolder.Telemetry.Properties.Add("ServiceTypeName", _context.ServiceTypeName);
			getAllOperationHolder.Telemetry.Properties.Add("ReplicaOrInstanceId", _context.InstanceId.ToString());
			getAllOperationHolder.Telemetry.Properties.Add("PartitionId", _context.PartitionId.ToString());
			getAllOperationHolder.Telemetry.Properties.Add("ApplicationName", _context.CodePackageActivationContext.ApplicationName);
			getAllOperationHolder.Telemetry.Properties.Add("ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName);
			getAllOperationHolder.Telemetry.Properties.Add("NodeName", _context.NodeContext.NodeName);
	       OperationHolder.StartOperation(getAllOperationHolder);
    
		}



		public void StopGetAll(
			)
		{
			WebApiServiceEventSource.Current.StopGetAll(
				_context
			);
	        var getAllOperationHolder = OperationHolder.StopOperation();
			_telemetryClient.StopOperation(getAllOperationHolder);
			getAllOperationHolder.Dispose();
    
		}



		public System.IDisposable RecieveWebApiRequest(
			System.Uri requestUri,
			string payload,
			string correlationId,
			string userId)
		{
			WebApiServiceEventSource.Current.StartRecieveWebApiRequest(
				_context, 
				requestUri, 
				payload, 
				correlationId, 
				userId
			);

			var recieveWebApiRequestOperationHolder = _telemetryClient.StartOperation<RequestTelemetry>(requestUri.ToString());
			recieveWebApiRequestOperationHolder.Telemetry.Properties.Add("ServiceName", _context.ServiceName.ToString());
			recieveWebApiRequestOperationHolder.Telemetry.Properties.Add("ServiceTypeName", _context.ServiceTypeName);
			recieveWebApiRequestOperationHolder.Telemetry.Properties.Add("ReplicaOrInstanceId", _context.InstanceId.ToString());
			recieveWebApiRequestOperationHolder.Telemetry.Properties.Add("PartitionId", _context.PartitionId.ToString());
			recieveWebApiRequestOperationHolder.Telemetry.Properties.Add("ApplicationName", _context.CodePackageActivationContext.ApplicationName);
			recieveWebApiRequestOperationHolder.Telemetry.Properties.Add("ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName);
			recieveWebApiRequestOperationHolder.Telemetry.Properties.Add("NodeName", _context.NodeContext.NodeName);
			recieveWebApiRequestOperationHolder.Telemetry.Properties.Add("RequestUri", requestUri.ToString());
			recieveWebApiRequestOperationHolder.Telemetry.Properties.Add("Payload", payload);
			recieveWebApiRequestOperationHolder.Telemetry.Properties.Add("CorrelationId", correlationId);
			recieveWebApiRequestOperationHolder.Telemetry.Properties.Add("UserId", userId);
			return new ScopeWrapper<RequestTelemetry>(_telemetryClient, recieveWebApiRequestOperationHolder, () => StopRecieveWebApiRequest(requestUri,payload,correlationId,userId));
    
		}



		public void StopRecieveWebApiRequest(
			System.Uri requestUri,
			string payload,
			string correlationId,
			string userId)
		{
			WebApiServiceEventSource.Current.StopRecieveWebApiRequest(
				_context, 
				requestUri, 
				payload, 
				correlationId, 
				userId
			);
    
		}



		public void RecieveWebApiRequestFailed(
			System.Uri requestUri,
			string payload,
			string correlationId,
			string userId,
			System.Exception exception)
		{
			WebApiServiceEventSource.Current.RecieveWebApiRequestFailed(
				_context, 
				requestUri, 
				payload, 
				correlationId, 
				userId, 
				exception
			);
			_telemetryClient.TrackException(
	            exception,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "RecieveWebApiRequestFailed" },
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.InstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"RequestUri", requestUri.ToString()},
                    {"Payload", payload},
                    {"CorrelationId", correlationId},
                    {"UserId", userId},
                    {"Message", exception.Message},
                    {"Source", exception.Source},
                    {"ExceptionTypeName", exception.GetType().FullName},
                    {"Exception", exception.AsJson()}
	            });
    
		}



	}
}
