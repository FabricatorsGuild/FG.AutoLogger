/*******************************************************************************************
*  This class is autogenerated from the class ServicesCommunicationLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Threading.Tasks;

namespace WebApiService
{
	internal sealed partial class WebApiServiceEventSource
	{

		private const int StartRecieveActorMessageEventId = 101;

		[Event(StartRecieveActorMessageEventId, Level = EventLevel.LogAlways, Message = "Start Recieve Actor Message {7} {8} {9} {10} {11} {12} {13}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Start)]
		private void StartRecieveActorMessage(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string actorMethodName, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StartRecieveActorMessageEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				actorMethodName, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StartRecieveActorMessage(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			string actorMethodName, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StartRecieveActorMessage(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					actorMethodName, 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int StopRecieveActorMessageEventId = 202;

		[Event(StopRecieveActorMessageEventId, Level = EventLevel.LogAlways, Message = "Stop Recieve Actor Message {7} {8} {9} {10} {11} {12} {13}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Stop)]
		private void StopRecieveActorMessage(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string actorMethodName, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StopRecieveActorMessageEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				actorMethodName, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StopRecieveActorMessage(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			string actorMethodName, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StopRecieveActorMessage(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					actorMethodName, 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int RecieveActorMessageFailedEventId = 303;

		[Event(RecieveActorMessageFailedEventId, Level = EventLevel.LogAlways, Message = "{14}", Keywords = Keywords.ServicesCommunication)]
		private void RecieveActorMessageFailed(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string actorMethodName, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string userId, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				RecieveActorMessageFailedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				actorMethodName, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				userId, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void RecieveActorMessageFailed(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			string actorMethodName, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				RecieveActorMessageFailed(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					actorMethodName, 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FailedToGetActorMethodNameEventId = 404;

		[Event(FailedToGetActorMethodNameEventId, Level = EventLevel.LogAlways, Message = "{10}", Keywords = Keywords.ServicesCommunication)]
		private void FailedToGetActorMethodName(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToGetActorMethodNameEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToGetActorMethodName(
			System.Fabric.StatelessServiceContext context, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToGetActorMethodName(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FailedToReadActorMessageHeadersEventId = 505;

		[Event(FailedToReadActorMessageHeadersEventId, Level = EventLevel.LogAlways, Message = "{9}", Keywords = Keywords.ServicesCommunication)]
		private void FailedToReadActorMessageHeaders(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			int InterfaceId, 
			int MethodId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToReadActorMessageHeadersEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				InterfaceId, 
				MethodId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToReadActorMessageHeaders(
			System.Fabric.StatelessServiceContext context, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceRemotingMessageHeaders, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToReadActorMessageHeaders(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					(serviceRemotingMessageHeaders?.InterfaceId ?? 0), 
					(serviceRemotingMessageHeaders?.MethodId ?? 0), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int StartRecieveServiceMessageEventId = 606;

		[Event(StartRecieveServiceMessageEventId, Level = EventLevel.LogAlways, Message = "Start Recieve Service Message {7} {8} {9} {10} {11} {12}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Start)]
		private void StartRecieveServiceMessage(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string serviceMethodName, 
			int InterfaceId, 
			int MethodId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StartRecieveServiceMessageEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				serviceMethodName, 
				InterfaceId, 
				MethodId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StartRecieveServiceMessage(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StartRecieveServiceMessage(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					serviceMethodName, 
					(serviceMessageHeaders?.InterfaceId ?? 0), 
					(serviceMessageHeaders?.MethodId ?? 0), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int StopRecieveServiceMessageEventId = 707;

		[Event(StopRecieveServiceMessageEventId, Level = EventLevel.LogAlways, Message = "Stop Recieve Service Message {7} {8} {9} {10} {11} {12}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Stop)]
		private void StopRecieveServiceMessage(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string serviceMethodName, 
			int InterfaceId, 
			int MethodId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StopRecieveServiceMessageEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				serviceMethodName, 
				InterfaceId, 
				MethodId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StopRecieveServiceMessage(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StopRecieveServiceMessage(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					serviceMethodName, 
					(serviceMessageHeaders?.InterfaceId ?? 0), 
					(serviceMessageHeaders?.MethodId ?? 0), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int RecieveServiceMessageFailedEventId = 808;

		[Event(RecieveServiceMessageFailedEventId, Level = EventLevel.LogAlways, Message = "{13}", Keywords = Keywords.ServicesCommunication)]
		private void RecieveServiceMessageFailed(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string serviceMethodName, 
			int InterfaceId, 
			int MethodId, 
			string userId, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				RecieveServiceMessageFailedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				serviceMethodName, 
				InterfaceId, 
				MethodId, 
				userId, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void RecieveServiceMessageFailed(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				RecieveServiceMessageFailed(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					serviceMethodName, 
					(serviceMessageHeaders?.InterfaceId ?? 0), 
					(serviceMessageHeaders?.MethodId ?? 0), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FailedToGetServiceMethodNameEventId = 909;

		[Event(FailedToGetServiceMethodNameEventId, Level = EventLevel.LogAlways, Message = "{10}", Keywords = Keywords.ServicesCommunication)]
		private void FailedToGetServiceMethodName(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			int interfaceId, 
			int methodId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToGetServiceMethodNameEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				interfaceId, 
				methodId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToGetServiceMethodName(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			int interfaceId, 
			int methodId, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToGetServiceMethodName(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					interfaceId, 
					methodId, 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FailedToReadCustomServiceMessageHeaderEventId = 1010;

		[Event(FailedToReadCustomServiceMessageHeaderEventId, Level = EventLevel.LogAlways, Message = "{9}", Keywords = Keywords.ServicesCommunication)]
		private void FailedToReadCustomServiceMessageHeader(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			int InterfaceId, 
			int MethodId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToReadCustomServiceMessageHeaderEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				InterfaceId, 
				MethodId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToReadCustomServiceMessageHeader(
			System.Fabric.StatelessServiceContext context, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceRemotingMessageHeaders, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToReadCustomServiceMessageHeader(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					(serviceRemotingMessageHeaders?.InterfaceId ?? 0), 
					(serviceRemotingMessageHeaders?.MethodId ?? 0), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int StartCallActorEventId = 1111;

		[Event(StartCallActorEventId, Level = EventLevel.LogAlways, Message = "Start Call Actor {7} {8} {9} {10} {11} {12} {13}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Start)]
		private void StartCallActor(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string actorMethodName, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StartCallActorEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				actorMethodName, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StartCallActor(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			string actorMethodName, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StartCallActor(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					actorMethodName, 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int StopCallActorEventId = 1212;

		[Event(StopCallActorEventId, Level = EventLevel.LogAlways, Message = "Stop Call Actor {7} {8} {9} {10} {11} {12} {13}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Stop)]
		private void StopCallActor(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string actorMethodName, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StopCallActorEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				actorMethodName, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StopCallActor(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			string actorMethodName, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StopCallActor(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					actorMethodName, 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int CallActorFailedEventId = 1313;

		[Event(CallActorFailedEventId, Level = EventLevel.LogAlways, Message = "{14}", Keywords = Keywords.ServicesCommunication)]
		private void CallActorFailed(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string actorMethodName, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string userId, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				CallActorFailedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				actorMethodName, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				userId, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void CallActorFailed(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			string actorMethodName, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				CallActorFailed(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					actorMethodName, 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int StartCallServiceEventId = 1414;

		[Event(StartCallServiceEventId, Level = EventLevel.LogAlways, Message = "Start Call Service {7} {8} {9} {10} {11} {12}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Start)]
		private void StartCallService(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string serviceMethodName, 
			int InterfaceId, 
			int MethodId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StartCallServiceEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				serviceMethodName, 
				InterfaceId, 
				MethodId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StartCallService(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StartCallService(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					serviceMethodName, 
					(serviceMessageHeaders?.InterfaceId ?? 0), 
					(serviceMessageHeaders?.MethodId ?? 0), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int StopCallServiceEventId = 1515;

		[Event(StopCallServiceEventId, Level = EventLevel.LogAlways, Message = "Stop Call Service {7} {8} {9} {10} {11} {12}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Stop)]
		private void StopCallService(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string serviceMethodName, 
			int InterfaceId, 
			int MethodId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StopCallServiceEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				serviceMethodName, 
				InterfaceId, 
				MethodId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StopCallService(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StopCallService(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					serviceMethodName, 
					(serviceMessageHeaders?.InterfaceId ?? 0), 
					(serviceMessageHeaders?.MethodId ?? 0), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int CallServiceFailedEventId = 1616;

		[Event(CallServiceFailedEventId, Level = EventLevel.LogAlways, Message = "{13}", Keywords = Keywords.ServicesCommunication)]
		private void CallServiceFailed(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string serviceMethodName, 
			int InterfaceId, 
			int MethodId, 
			string userId, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				CallServiceFailedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				serviceMethodName, 
				InterfaceId, 
				MethodId, 
				userId, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void CallServiceFailed(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				CallServiceFailed(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					serviceMethodName, 
					(serviceMessageHeaders?.InterfaceId ?? 0), 
					(serviceMessageHeaders?.MethodId ?? 0), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FailedtoSendMessageEventId = 1717;

		[Event(FailedtoSendMessageEventId, Level = EventLevel.LogAlways, Message = "{10}", Keywords = Keywords.ServicesCommunication)]
		private void FailedtoSendMessage(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string userId, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedtoSendMessageEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				userId, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedtoSendMessage(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader header, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedtoSendMessage(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					header?.GetHeader("userId"), 
					header?.GetHeader("correlationId"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int StartRequestContextEventId = 1818;

		[Event(StartRequestContextEventId, Level = EventLevel.LogAlways, Message = "Start Request Context {7}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Start)]
		private void StartRequestContext(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string headers)
		{
			WriteEvent(
				StartRequestContextEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				headers);
		}

		[NonEvent]
		public void StartRequestContext(
			System.Fabric.StatelessServiceContext context, 
			System.Collections.Generic.IEnumerable<CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestHeader> headers)
		{
			if (this.IsEnabled())
			{
				StartRequestContext(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					headers.ToString());
			}
		}


		private const int StopRequestContextEventId = 1919;

		[Event(StopRequestContextEventId, Level = EventLevel.LogAlways, Message = "Stop Request Context {7}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Stop)]
		private void StopRequestContext(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string headers)
		{
			WriteEvent(
				StopRequestContextEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				headers);
		}

		[NonEvent]
		public void StopRequestContext(
			System.Fabric.StatelessServiceContext context, 
			System.Collections.Generic.IEnumerable<CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestHeader> headers)
		{
			if (this.IsEnabled())
			{
				StopRequestContext(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					headers.ToString());
			}
		}


		private const int FailedRequestContextEventId = 2020;

		[Event(FailedRequestContextEventId, Level = EventLevel.LogAlways, Message = "{8}", Keywords = Keywords.ServicesCommunication)]
		private void FailedRequestContext(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string headers, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedRequestContextEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				headers, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedRequestContext(
			System.Fabric.StatelessServiceContext context, 
			System.Collections.Generic.IEnumerable<CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestHeader> headers, 
			System.Exception exception)
		{
			if (this.IsEnabled())
			{
				FailedRequestContext(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					headers.ToString(), 
					exception.Message, 
					exception.Source, 
					exception.GetType().FullName, 
					exception.AsJson());
			}
		}


		private const int EnumeratingPartitionsEventId = 2121;

		[Event(EnumeratingPartitionsEventId, Level = EventLevel.LogAlways, Message = "Enumerating Partitions {7}", Keywords = Keywords.ServicesCommunication)]
		private void EnumeratingPartitions(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string serviceUri)
		{
			WriteEvent(
				EnumeratingPartitionsEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				serviceUri);
		}

		[NonEvent]
		public void EnumeratingPartitions(
			System.Fabric.StatelessServiceContext context, 
			System.Uri serviceUri)
		{
			if (this.IsEnabled())
			{
				EnumeratingPartitions(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					serviceUri.ToString());
			}
		}


		private const int FailedToEnumeratePartitionsEventId = 2222;

		[Event(FailedToEnumeratePartitionsEventId, Level = EventLevel.LogAlways, Message = "{8}", Keywords = Keywords.ServicesCommunication)]
		private void FailedToEnumeratePartitions(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string serviceUri, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToEnumeratePartitionsEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				serviceUri, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToEnumeratePartitions(
			System.Fabric.StatelessServiceContext context, 
			System.Uri serviceUri, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToEnumeratePartitions(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					serviceUri.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int EnumeratedExistingPartitionsEventId = 2323;

		[Event(EnumeratedExistingPartitionsEventId, Level = EventLevel.LogAlways, Message = "Enumerated Existing Partitions {7} {8}", Keywords = Keywords.ServicesCommunication)]
		private void EnumeratedExistingPartitions(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string serviceUri, 
			string partitions)
		{
			WriteEvent(
				EnumeratedExistingPartitionsEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				serviceUri, 
				partitions);
		}

		[NonEvent]
		public void EnumeratedExistingPartitions(
			System.Fabric.StatelessServiceContext context, 
			System.Uri serviceUri, 
			System.Collections.Generic.IEnumerable<System.Fabric.Int64RangePartitionInformation> partitions)
		{
			if (this.IsEnabled())
			{
				EnumeratedExistingPartitions(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					serviceUri.ToString(), 
					partitions.ToString());
			}
		}


		private const int EnumeratedAndCachedPartitionsEventId = 2424;

		[Event(EnumeratedAndCachedPartitionsEventId, Level = EventLevel.LogAlways, Message = "Enumerated And Cached Partitions {7} {8}", Keywords = Keywords.ServicesCommunication)]
		private void EnumeratedAndCachedPartitions(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string serviceUri, 
			string partitions)
		{
			WriteEvent(
				EnumeratedAndCachedPartitionsEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				serviceUri, 
				partitions);
		}

		[NonEvent]
		public void EnumeratedAndCachedPartitions(
			System.Fabric.StatelessServiceContext context, 
			System.Uri serviceUri, 
			System.Collections.Generic.IEnumerable<System.Fabric.Int64RangePartitionInformation> partitions)
		{
			if (this.IsEnabled())
			{
				EnumeratedAndCachedPartitions(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					serviceUri.ToString(), 
					partitions.ToString());
			}
		}


	}
}