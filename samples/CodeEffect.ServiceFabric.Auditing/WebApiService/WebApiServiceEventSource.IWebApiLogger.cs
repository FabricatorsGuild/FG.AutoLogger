/*******************************************************************************************
*  This class is autogenerated from the class WebApiLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Threading.Tasks;

namespace WebApiService
{
	internal sealed partial class WebApiServiceEventSource
	{

		private const int ActivatingControllerEventId = 101;

		[Event(ActivatingControllerEventId, Level = EventLevel.LogAlways, Message = "Activating Controller {7} {8}", Keywords = Keywords.WebApi)]
		private void ActivatingController(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string correlationId, 
			string userId)
		{
			WriteEvent(
				ActivatingControllerEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				correlationId, 
				userId);
		}

		[NonEvent]
		public void ActivatingController(
			System.Fabric.StatelessServiceContext context, 
			string correlationId, 
			string userId)
		{
			if (this.IsEnabled())
			{
				ActivatingController(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					correlationId, 
					userId);
			}
		}


		private const int StartGetAllEventId = 202;

		[Event(StartGetAllEventId, Level = EventLevel.LogAlways, Message = "Start Get All", Keywords = Keywords.WebApi, Opcode = EventOpcode.Start)]
		private void StartGetAll(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName)
		{
			WriteEvent(
				StartGetAllEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName);
		}

		[NonEvent]
		public void StartGetAll(
			System.Fabric.StatelessServiceContext context)
		{
			if (this.IsEnabled())
			{
				StartGetAll(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName);
			}
		}


		private const int StopGetAllEventId = 303;

		[Event(StopGetAllEventId, Level = EventLevel.LogAlways, Message = "Stop Get All", Keywords = Keywords.WebApi, Opcode = EventOpcode.Stop)]
		private void StopGetAll(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName)
		{
			WriteEvent(
				StopGetAllEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName);
		}

		[NonEvent]
		public void StopGetAll(
			System.Fabric.StatelessServiceContext context)
		{
			if (this.IsEnabled())
			{
				StopGetAll(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName);
			}
		}


		private const int StartRecieveWebApiRequestEventId = 404;

		[Event(StartRecieveWebApiRequestEventId, Level = EventLevel.LogAlways, Message = "Start Recieve Web Api Request {7} {8} {9} {10}", Keywords = Keywords.WebApi, Opcode = EventOpcode.Start, Task = Tasks.RecieveWebApiRequest)]
		private void StartRecieveWebApiRequest(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string payload, 
			string correlationId, 
			string userId)
		{
			WriteEvent(
				StartRecieveWebApiRequestEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				payload, 
				correlationId, 
				userId);
		}

		[NonEvent]
		public void StartRecieveWebApiRequest(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			string payload, 
			string correlationId, 
			string userId)
		{
			if (this.IsEnabled())
			{
				StartRecieveWebApiRequest(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					payload, 
					correlationId, 
					userId);
			}
		}


		private const int StopRecieveWebApiRequestEventId = 505;

		[Event(StopRecieveWebApiRequestEventId, Level = EventLevel.LogAlways, Message = "Stop Recieve Web Api Request {7} {8} {9} {10}", Keywords = Keywords.WebApi, Opcode = EventOpcode.Stop, Task = Tasks.RecieveWebApiRequest)]
		private void StopRecieveWebApiRequest(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string payload, 
			string correlationId, 
			string userId)
		{
			WriteEvent(
				StopRecieveWebApiRequestEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				payload, 
				correlationId, 
				userId);
		}

		[NonEvent]
		public void StopRecieveWebApiRequest(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			string payload, 
			string correlationId, 
			string userId)
		{
			if (this.IsEnabled())
			{
				StopRecieveWebApiRequest(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					payload, 
					correlationId, 
					userId);
			}
		}


		private const int RecieveWebApiRequestFailedEventId = 606;

		[Event(RecieveWebApiRequestFailedEventId, Level = EventLevel.LogAlways, Message = "{11}", Keywords = Keywords.WebApi)]
		private void RecieveWebApiRequestFailed(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string payload, 
			string correlationId, 
			string userId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				RecieveWebApiRequestFailedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				payload, 
				correlationId, 
				userId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void RecieveWebApiRequestFailed(
			System.Fabric.StatelessServiceContext context, 
			System.Uri requestUri, 
			string payload, 
			string correlationId, 
			string userId, 
			System.Exception exception)
		{
			if (this.IsEnabled())
			{
				RecieveWebApiRequestFailed(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					payload, 
					correlationId, 
					userId, 
					exception.Message, 
					exception.Source, 
					exception.GetType().FullName, 
					exception.AsJson());
			}
		}


	}
}