/*******************************************************************************************
*  This class is autogenerated from the class WebApiLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Threading.Tasks;

namespace WebApiService
{
	internal sealed partial class WebApiServiceEventSource
	{

		private const int ActivatingControllerEventId = 101;

		[Event(ActivatingControllerEventId, Level = EventLevel.LogAlways, Message = "Activating Controller", Keywords = Keywords.WebApi)]
		private void ActivatingController(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName)
		{
			WriteEvent(
				ActivatingControllerEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName);
		}

		[NonEvent]
		public void ActivatingController(
			System.Fabric.StatelessServiceContext context)
		{
			if (this.IsEnabled())
			{
				ActivatingController(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName);
			}
		}


		private const int StartGetAllEventId = 202;

		[Event(StartGetAllEventId, Level = EventLevel.LogAlways, Message = "Start Get All", Keywords = Keywords.WebApi, Opcode = EventOpcode.Start)]
		private void StartGetAll(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName)
		{
			WriteEvent(
				StartGetAllEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName);
		}

		[NonEvent]
		public void StartGetAll(
			System.Fabric.StatelessServiceContext context)
		{
			if (this.IsEnabled())
			{
				StartGetAll(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName);
			}
		}


		private const int StopGetAllEventId = 303;

		[Event(StopGetAllEventId, Level = EventLevel.LogAlways, Message = "Stop Get All", Keywords = Keywords.WebApi, Opcode = EventOpcode.Stop)]
		private void StopGetAll(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName)
		{
			WriteEvent(
				StopGetAllEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName);
		}

		[NonEvent]
		public void StopGetAll(
			System.Fabric.StatelessServiceContext context)
		{
			if (this.IsEnabled())
			{
				StopGetAll(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName);
			}
		}


	}
}