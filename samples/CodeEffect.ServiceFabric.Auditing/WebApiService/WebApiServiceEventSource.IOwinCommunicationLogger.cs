/*******************************************************************************************
*  This class is autogenerated from the class OwinCommunicationLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Threading.Tasks;

namespace WebApiService
{
	internal sealed partial class WebApiServiceEventSource
	{

		private const int AbortingWebServerEventId = 301;

		[Event(AbortingWebServerEventId, Level = EventLevel.LogAlways, Message = "Aborting Web Server", Keywords = Keywords.OwinCommunication)]
		private void AbortingWebServer(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName)
		{
			WriteEvent(
				AbortingWebServerEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName);
		}

		[NonEvent]
		public void AbortingWebServer(
			System.Fabric.StatelessServiceContext context)
		{
			if (this.IsEnabled())
			{
				AbortingWebServer(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName);
			}
		}


		private const int ClosingWebServerEventId = 602;

		[Event(ClosingWebServerEventId, Level = EventLevel.LogAlways, Message = "Closing Web Server", Keywords = Keywords.OwinCommunication)]
		private void ClosingWebServer(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName)
		{
			WriteEvent(
				ClosingWebServerEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName);
		}

		[NonEvent]
		public void ClosingWebServer(
			System.Fabric.StatelessServiceContext context)
		{
			if (this.IsEnabled())
			{
				ClosingWebServer(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName);
			}
		}


		private const int StartingWebServerEventId = 903;

		[Event(StartingWebServerEventId, Level = EventLevel.LogAlways, Message = "Starting Web Server {7}", Keywords = Keywords.OwinCommunication)]
		private void StartingWebServer(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string listeningAddress)
		{
			WriteEvent(
				StartingWebServerEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				listeningAddress);
		}

		[NonEvent]
		public void StartingWebServer(
			System.Fabric.StatelessServiceContext context, 
			string listeningAddress)
		{
			if (this.IsEnabled())
			{
				StartingWebServer(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					listeningAddress);
			}
		}


		private const int ListeningOnEventId = 1204;

		[Event(ListeningOnEventId, Level = EventLevel.LogAlways, Message = "Listening On {7}", Keywords = Keywords.OwinCommunication)]
		private void ListeningOn(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string publishAddress)
		{
			WriteEvent(
				ListeningOnEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				publishAddress);
		}

		[NonEvent]
		public void ListeningOn(
			System.Fabric.StatelessServiceContext context, 
			string publishAddress)
		{
			if (this.IsEnabled())
			{
				ListeningOn(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					publishAddress);
			}
		}


		private const int WebServerFailedEventId = 1505;

		[Event(WebServerFailedEventId, Level = EventLevel.LogAlways, Message = "{7}", Keywords = Keywords.OwinCommunication)]
		private void WebServerFailed(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				WebServerFailedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void WebServerFailed(
			System.Fabric.StatelessServiceContext context, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				WebServerFailed(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.InstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


	}
}