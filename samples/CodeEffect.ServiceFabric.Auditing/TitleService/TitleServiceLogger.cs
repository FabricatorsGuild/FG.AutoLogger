/*******************************************************************************************
*  This class is autogenerated from the class TitleServiceLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using TitleService.Diagnostics;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;
using CodeEffect.Diagnostics.EventSourceGenerator.AI;


namespace TitleService
{
	internal sealed class TitleServiceLogger : ITitleServiceLogger
	{
		private readonly System.Fabric.StatefulServiceContext _serviceContext;
		private readonly CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext _requestContext;
		private readonly Microsoft.ApplicationInsights.TelemetryClient _telemetryClient;

		public TitleServiceLogger(
			System.Fabric.StatefulServiceContext serviceContext,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext requestContext)
		{
			_serviceContext = serviceContext;
			_requestContext = requestContext;
			
            _telemetryClient = new Microsoft.ApplicationInsights.TelemetryClient();
            _telemetryClient.Context.User.Id = Environment.UserName;
            _telemetryClient.Context.Session.Id = Guid.NewGuid().ToString();
            _telemetryClient.Context.Device.OperatingSystem = Environment.OSVersion.ToString();

		}

		public void UpdateTitle(
			string person,
			string title)
		{
			TitleActorServiceEventSource.Current.UpdateTitle(
				_serviceContext, 
				_requestContext, 
				person, 
				title
			);
			_telemetryClient.TrackEvent(
	            nameof(UpdateTitle),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ServiceName", _serviceContext.ServiceName.ToString()},
                    {"ServiceTypeName", _serviceContext.ServiceTypeName},
                    {"ReplicaOrInstanceId", _serviceContext.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _serviceContext.PartitionId.ToString()},
                    {"ApplicationName", _serviceContext.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _serviceContext.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _serviceContext.NodeContext.NodeName},
                    {"CorrelationId", CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["correlationId"]},
                    {"UserId", CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["userId"]},
                    {"RequestUri", CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["requestUri"]},
                    {"Person", person},
                    {"Title", title}
	            });
    
		}



	}
}
