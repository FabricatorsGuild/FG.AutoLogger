/*******************************************************************************************
*  This class is autogenerated from the class ServicesCommunicationLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using PersonActor.Diagnostics;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;
using CodeEffect.Diagnostics.EventSourceGenerator.AI;


namespace PersonActor
{
	internal sealed class ServicesCommunicationLogger : IServicesCommunicationLogger
	{
		private readonly System.Fabric.StatefulServiceContext _context;
		private readonly Microsoft.ApplicationInsights.TelemetryClient _telemetryClient;

		public ServicesCommunicationLogger(
			System.Fabric.StatefulServiceContext context)
		{
			_context = context;
			
            _telemetryClient = new Microsoft.ApplicationInsights.TelemetryClient();
            _telemetryClient.Context.User.Id = Environment.UserName;
            _telemetryClient.Context.Session.Id = Guid.NewGuid().ToString();
            _telemetryClient.Context.Device.OperatingSystem = Environment.OSVersion.ToString();

		}

		public void StartActorMessageRecieved(
			string methodName,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			PersonActorServiceEventSource.Current.StartActorMessageRecieved(
				_context, 
				methodName, 
				headers
			);

			var actorMessageRecievedOperationHolder = _telemetryClient.StartOperation<RequestTelemetry>("actorMessageRecieved");
	       actorMessageRecievedOperationHolder.Telemetry.Properties.Add("ServiceName", _context.ServiceName.ToString());
			actorMessageRecievedOperationHolder.Telemetry.Properties.Add("ServiceTypeName", _context.ServiceTypeName);
			actorMessageRecievedOperationHolder.Telemetry.Properties.Add("ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString());
			actorMessageRecievedOperationHolder.Telemetry.Properties.Add("PartitionId", _context.PartitionId.ToString());
			actorMessageRecievedOperationHolder.Telemetry.Properties.Add("ApplicationName", _context.CodePackageActivationContext.ApplicationName);
			actorMessageRecievedOperationHolder.Telemetry.Properties.Add("ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName);
			actorMessageRecievedOperationHolder.Telemetry.Properties.Add("NodeName", _context.NodeContext.NodeName);
			actorMessageRecievedOperationHolder.Telemetry.Properties.Add("MethodName", methodName);
			actorMessageRecievedOperationHolder.Telemetry.Properties.Add("User", headers?.GetHeader("name"));
			actorMessageRecievedOperationHolder.Telemetry.Properties.Add("CorrelationId", headers?.GetHeader("correlation-id"));
	       OperationHolder.StartOperation(actorMessageRecievedOperationHolder);
    
		}



		public void StopActorMessageRecieved(
			string methodName,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			PersonActorServiceEventSource.Current.StopActorMessageRecieved(
				_context, 
				methodName, 
				headers
			);
	        var actorMessageRecievedOperationHolder = OperationHolder.StopOperation();
			_telemetryClient.StopOperation(actorMessageRecievedOperationHolder);
			actorMessageRecievedOperationHolder.Dispose();
    
		}



		public void ActorMessageDispatched(
			string methodName,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			PersonActorServiceEventSource.Current.ActorMessageDispatched(
				_context, 
				methodName, 
				headers
			);
			_telemetryClient.TrackEvent(
	            nameof(ActorMessageDispatched),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"MethodName", methodName},
                    {"User", headers?.GetHeader("name")},
                    {"CorrelationId", headers?.GetHeader("correlation-id")}
	            });
    
		}



		public void ActorMessageFailed(
			string methodName,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers,
			System.Exception ex)
		{
			PersonActorServiceEventSource.Current.ActorMessageFailed(
				_context, 
				methodName, 
				headers, 
				ex
			);
			_telemetryClient.TrackException(
	            ex,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "ActorMessageFailed" },
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"MethodName", methodName},
                    {"User", headers?.GetHeader("name")},
                    {"CorrelationId", headers?.GetHeader("correlation-id")},
                    {"Message", ex.Message},
                    {"Source", ex.Source},
                    {"ExceptionTypeName", ex.GetType().FullName},
                    {"Exception", ex.AsJson()}
	            });
    
		}



		public void ActorMessageHandled(
			string methodName,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			PersonActorServiceEventSource.Current.ActorMessageHandled(
				_context, 
				methodName, 
				headers
			);
			_telemetryClient.TrackEvent(
	            nameof(ActorMessageHandled),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"MethodName", methodName},
                    {"User", headers?.GetHeader("name")},
                    {"CorrelationId", headers?.GetHeader("correlation-id")}
	            });
    
		}



		public void FailedToGetActorMethodName(
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders,
			System.Exception ex)
		{
			PersonActorServiceEventSource.Current.FailedToGetActorMethodName(
				_context, 
				actorMessageHeaders, 
				ex
			);
			_telemetryClient.TrackException(
	            ex,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "FailedToGetActorMethodName" },
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"ActorMessageHeaders", actorMessageHeaders.ToString()},
                    {"Message", ex.Message},
                    {"Source", ex.Source},
                    {"ExceptionTypeName", ex.GetType().FullName},
                    {"Exception", ex.AsJson()}
	            });
    
		}



		public void FailedToReadActorMessageHeaders(
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceRemotingMessageHeaders,
			System.Exception ex)
		{
			PersonActorServiceEventSource.Current.FailedToReadActorMessageHeaders(
				_context, 
				serviceRemotingMessageHeaders, 
				ex
			);
			_telemetryClient.TrackException(
	            ex,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "FailedToReadActorMessageHeaders" },
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"ServiceRemotingMessageHeaders", serviceRemotingMessageHeaders.ToString()},
                    {"Message", ex.Message},
                    {"Source", ex.Source},
                    {"ExceptionTypeName", ex.GetType().FullName},
                    {"Exception", ex.AsJson()}
	            });
    
		}



		public void StartMessageRecieved(
			string methodName,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			PersonActorServiceEventSource.Current.StartMessageRecieved(
				_context, 
				methodName, 
				headers
			);

			var messageRecievedOperationHolder = _telemetryClient.StartOperation<RequestTelemetry>("messageRecieved");
	       messageRecievedOperationHolder.Telemetry.Properties.Add("ServiceName", _context.ServiceName.ToString());
			messageRecievedOperationHolder.Telemetry.Properties.Add("ServiceTypeName", _context.ServiceTypeName);
			messageRecievedOperationHolder.Telemetry.Properties.Add("ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString());
			messageRecievedOperationHolder.Telemetry.Properties.Add("PartitionId", _context.PartitionId.ToString());
			messageRecievedOperationHolder.Telemetry.Properties.Add("ApplicationName", _context.CodePackageActivationContext.ApplicationName);
			messageRecievedOperationHolder.Telemetry.Properties.Add("ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName);
			messageRecievedOperationHolder.Telemetry.Properties.Add("NodeName", _context.NodeContext.NodeName);
			messageRecievedOperationHolder.Telemetry.Properties.Add("MethodName", methodName);
			messageRecievedOperationHolder.Telemetry.Properties.Add("User", headers?.GetHeader("name"));
			messageRecievedOperationHolder.Telemetry.Properties.Add("CorrelationId", headers?.GetHeader("correlation-id"));
	       OperationHolder.StartOperation(messageRecievedOperationHolder);
    
		}



		public void StopMessageRecieved(
			string methodName,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			PersonActorServiceEventSource.Current.StopMessageRecieved(
				_context, 
				methodName, 
				headers
			);
	        var messageRecievedOperationHolder = OperationHolder.StopOperation();
			_telemetryClient.StopOperation(messageRecievedOperationHolder);
			messageRecievedOperationHolder.Dispose();
    
		}



		public void MessageDispatched(
			string methodName,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			PersonActorServiceEventSource.Current.MessageDispatched(
				_context, 
				methodName, 
				headers
			);
			_telemetryClient.TrackEvent(
	            nameof(MessageDispatched),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"MethodName", methodName},
                    {"User", headers?.GetHeader("name")},
                    {"CorrelationId", headers?.GetHeader("correlation-id")}
	            });
    
		}



		public void MessageFailed(
			string methodName,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers,
			System.Exception ex)
		{
			PersonActorServiceEventSource.Current.MessageFailed(
				_context, 
				methodName, 
				headers, 
				ex
			);
			_telemetryClient.TrackException(
	            ex,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "MessageFailed" },
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"MethodName", methodName},
                    {"User", headers?.GetHeader("name")},
                    {"CorrelationId", headers?.GetHeader("correlation-id")},
                    {"Message", ex.Message},
                    {"Source", ex.Source},
                    {"ExceptionTypeName", ex.GetType().FullName},
                    {"Exception", ex.AsJson()}
	            });
    
		}



		public void MessageHandled(
			string methodName,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			PersonActorServiceEventSource.Current.MessageHandled(
				_context, 
				methodName, 
				headers
			);
			_telemetryClient.TrackEvent(
	            nameof(MessageHandled),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"MethodName", methodName},
                    {"User", headers?.GetHeader("name")},
                    {"CorrelationId", headers?.GetHeader("correlation-id")}
	            });
    
		}



		public void FailedToGetServiceMethodName(
			int interfaceId,
			int methodId,
			System.Exception ex)
		{
			PersonActorServiceEventSource.Current.FailedToGetServiceMethodName(
				_context, 
				interfaceId, 
				methodId, 
				ex
			);
			_telemetryClient.TrackException(
	            ex,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "FailedToGetServiceMethodName" },
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"InterfaceId", interfaceId.ToString()},
                    {"MethodId", methodId.ToString()},
                    {"Message", ex.Message},
                    {"Source", ex.Source},
                    {"ExceptionTypeName", ex.GetType().FullName},
                    {"Exception", ex.AsJson()}
	            });
    
		}



		public void FailedToReadCustomServiceMessageHeader(
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceRemotingMessageHeaders,
			System.Exception ex)
		{
			PersonActorServiceEventSource.Current.FailedToReadCustomServiceMessageHeader(
				_context, 
				serviceRemotingMessageHeaders, 
				ex
			);
			_telemetryClient.TrackException(
	            ex,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "FailedToReadCustomServiceMessageHeader" },
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"ServiceRemotingMessageHeaders", serviceRemotingMessageHeaders.ToString()},
                    {"Message", ex.Message},
                    {"Source", ex.Source},
                    {"ExceptionTypeName", ex.GetType().FullName},
                    {"Exception", ex.AsJson()}
	            });
    
		}



		public System.IDisposable CallService(
			System.Uri requestUri,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			PersonActorServiceEventSource.Current.StartCallService(
				_context, 
				requestUri, 
				headers
			);

			var callServiceOperationHolder = _telemetryClient.StartOperation<DependencyTelemetry>(requestUri.ToString());
			callServiceOperationHolder.Telemetry.Properties.Add("ServiceName", _context.ServiceName.ToString());
			callServiceOperationHolder.Telemetry.Properties.Add("ServiceTypeName", _context.ServiceTypeName);
			callServiceOperationHolder.Telemetry.Properties.Add("ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString());
			callServiceOperationHolder.Telemetry.Properties.Add("PartitionId", _context.PartitionId.ToString());
			callServiceOperationHolder.Telemetry.Properties.Add("ApplicationName", _context.CodePackageActivationContext.ApplicationName);
			callServiceOperationHolder.Telemetry.Properties.Add("ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName);
			callServiceOperationHolder.Telemetry.Properties.Add("NodeName", _context.NodeContext.NodeName);
			callServiceOperationHolder.Telemetry.Properties.Add("RequestUri", requestUri.ToString());
			callServiceOperationHolder.Telemetry.Properties.Add("User", headers?.GetHeader("name"));
			callServiceOperationHolder.Telemetry.Properties.Add("CorrelationId", headers?.GetHeader("correlation-id"));
			return new ScopeWrapper<DependencyTelemetry>(_telemetryClient, callServiceOperationHolder, () => StopCallService(requestUri,headers));
    
		}



		public void StopCallService(
			System.Uri requestUri,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			PersonActorServiceEventSource.Current.StopCallService(
				_context, 
				requestUri, 
				headers
			);
    
		}



		public void StartMessageSend(
			System.Uri requestUri,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			PersonActorServiceEventSource.Current.StartMessageSend(
				_context, 
				requestUri, 
				headers
			);

			var messageSendOperationHolder = _telemetryClient.StartOperation<RequestTelemetry>(requestUri.ToString());
	       messageSendOperationHolder.Telemetry.Properties.Add("ServiceName", _context.ServiceName.ToString());
			messageSendOperationHolder.Telemetry.Properties.Add("ServiceTypeName", _context.ServiceTypeName);
			messageSendOperationHolder.Telemetry.Properties.Add("ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString());
			messageSendOperationHolder.Telemetry.Properties.Add("PartitionId", _context.PartitionId.ToString());
			messageSendOperationHolder.Telemetry.Properties.Add("ApplicationName", _context.CodePackageActivationContext.ApplicationName);
			messageSendOperationHolder.Telemetry.Properties.Add("ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName);
			messageSendOperationHolder.Telemetry.Properties.Add("NodeName", _context.NodeContext.NodeName);
			messageSendOperationHolder.Telemetry.Properties.Add("RequestUri", requestUri.ToString());
			messageSendOperationHolder.Telemetry.Properties.Add("User", headers?.GetHeader("name"));
			messageSendOperationHolder.Telemetry.Properties.Add("CorrelationId", headers?.GetHeader("correlation-id"));
	       OperationHolder.StartOperation(messageSendOperationHolder);
    
		}



		public void StopMessageSend(
			System.Uri requestUri,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			PersonActorServiceEventSource.Current.StopMessageSend(
				_context, 
				requestUri, 
				headers
			);
	        var messageSendOperationHolder = OperationHolder.StopOperation();
			_telemetryClient.StopOperation(messageSendOperationHolder);
			messageSendOperationHolder.Dispose();
    
		}



		public void FailedtoSendMessage(
			System.Uri requestUri,
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader header,
			System.Exception ex)
		{
			PersonActorServiceEventSource.Current.FailedtoSendMessage(
				_context, 
				requestUri, 
				header, 
				ex
			);
			_telemetryClient.TrackException(
	            ex,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "FailedtoSendMessage" },
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"RequestUri", requestUri.ToString()},
                    {"User", header?.GetHeader("name")},
                    {"CorrelationId", header?.GetHeader("correlation-id")},
                    {"Message", ex.Message},
                    {"Source", ex.Source},
                    {"ExceptionTypeName", ex.GetType().FullName},
                    {"Exception", ex.AsJson()}
	            });
    
		}



		public void StartRequestContext(
			System.Collections.Generic.IEnumerable<CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestHeader> headers)
		{
			PersonActorServiceEventSource.Current.StartRequestContext(
				_context, 
				headers
			);

			var requestContextOperationHolder = _telemetryClient.StartOperation<RequestTelemetry>("requestContext");
	       requestContextOperationHolder.Telemetry.Properties.Add("ServiceName", _context.ServiceName.ToString());
			requestContextOperationHolder.Telemetry.Properties.Add("ServiceTypeName", _context.ServiceTypeName);
			requestContextOperationHolder.Telemetry.Properties.Add("ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString());
			requestContextOperationHolder.Telemetry.Properties.Add("PartitionId", _context.PartitionId.ToString());
			requestContextOperationHolder.Telemetry.Properties.Add("ApplicationName", _context.CodePackageActivationContext.ApplicationName);
			requestContextOperationHolder.Telemetry.Properties.Add("ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName);
			requestContextOperationHolder.Telemetry.Properties.Add("NodeName", _context.NodeContext.NodeName);
			requestContextOperationHolder.Telemetry.Properties.Add("Headers", headers.ToString());
	       OperationHolder.StartOperation(requestContextOperationHolder);
    
		}



		public void StopRequestContext(
			System.Collections.Generic.IEnumerable<CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestHeader> headers)
		{
			PersonActorServiceEventSource.Current.StopRequestContext(
				_context, 
				headers
			);
	        var requestContextOperationHolder = OperationHolder.StopOperation();
			_telemetryClient.StopOperation(requestContextOperationHolder);
			requestContextOperationHolder.Dispose();
    
		}



		public void FailedRequestContext(
			System.Collections.Generic.IEnumerable<CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestHeader> headers,
			System.Exception exception)
		{
			PersonActorServiceEventSource.Current.FailedRequestContext(
				_context, 
				headers, 
				exception
			);
			_telemetryClient.TrackException(
	            exception,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "FailedRequestContext" },
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"Headers", headers.ToString()},
                    {"Message", exception.Message},
                    {"Source", exception.Source},
                    {"ExceptionTypeName", exception.GetType().FullName},
                    {"Exception", exception.AsJson()}
	            });
    
		}



		public void EnumeratingPartitions(
			System.Uri serviceUri)
		{
			PersonActorServiceEventSource.Current.EnumeratingPartitions(
				_context, 
				serviceUri
			);
			_telemetryClient.TrackEvent(
	            nameof(EnumeratingPartitions),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"ServiceUri", serviceUri.ToString()}
	            });
    
		}



		public void FailedToEnumeratePartitions(
			System.Uri serviceUri,
			System.Exception ex)
		{
			PersonActorServiceEventSource.Current.FailedToEnumeratePartitions(
				_context, 
				serviceUri, 
				ex
			);
			_telemetryClient.TrackException(
	            ex,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "FailedToEnumeratePartitions" },
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"ServiceUri", serviceUri.ToString()},
                    {"Message", ex.Message},
                    {"Source", ex.Source},
                    {"ExceptionTypeName", ex.GetType().FullName},
                    {"Exception", ex.AsJson()}
	            });
    
		}



		public void EnumeratedExistingPartitions(
			System.Uri serviceUri,
			System.Collections.Generic.IEnumerable<System.Fabric.Int64RangePartitionInformation> partitions)
		{
			PersonActorServiceEventSource.Current.EnumeratedExistingPartitions(
				_context, 
				serviceUri, 
				partitions
			);
			_telemetryClient.TrackEvent(
	            nameof(EnumeratedExistingPartitions),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"ServiceUri", serviceUri.ToString()},
                    {"Partitions", partitions.ToString()}
	            });
    
		}



		public void EnumeratedAndCachedPartitions(
			System.Uri serviceUri,
			System.Collections.Generic.IEnumerable<System.Fabric.Int64RangePartitionInformation> partitions)
		{
			PersonActorServiceEventSource.Current.EnumeratedAndCachedPartitions(
				_context, 
				serviceUri, 
				partitions
			);
			_telemetryClient.TrackEvent(
	            nameof(EnumeratedAndCachedPartitions),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.ReplicaOrInstanceId.ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"ServiceUri", serviceUri.ToString()},
                    {"Partitions", partitions.ToString()}
	            });
    
		}



	}
}
