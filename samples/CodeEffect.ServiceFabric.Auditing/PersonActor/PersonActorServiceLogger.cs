/*******************************************************************************************
*  This class is autogenerated from the class PersonActorServiceLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using PersonActor.Diagnostics;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;
using CodeEffect.Diagnostics.EventSourceGenerator.AI;


namespace PersonActor
{
	internal sealed class PersonActorServiceLogger : IPersonActorServiceLogger
	{
		private readonly Microsoft.ServiceFabric.Actors.Runtime.ActorService _actorService;
		private readonly FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext _context;
		private readonly Microsoft.ApplicationInsights.TelemetryClient _telemetryClient;

		public PersonActorServiceLogger(
			Microsoft.ServiceFabric.Actors.Runtime.ActorService actorService,
			FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext context)
		{
			_actorService = actorService;
			_context = context;
			
            _telemetryClient = new Microsoft.ApplicationInsights.TelemetryClient();
            _telemetryClient.Context.User.Id = Environment.UserName;
            _telemetryClient.Context.Session.Id = Guid.NewGuid().ToString();
            _telemetryClient.Context.Device.OperatingSystem = Environment.OSVersion.ToString();

		}

		public void PersonGenerated(
			string name,
			string title)
		{
			PersonActorServiceEventSource.Current.PersonGenerated(
				_actorService, 
				_context, 
				name, 
				title
			);
			_telemetryClient.TrackEvent(
	            nameof(PersonGenerated),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ActorType", _actorService.ActorTypeInformation.ImplementationType.ToString()},
                    {"ApplicationTypeName", _actorService.Context.CodePackageActivationContext.ApplicationTypeName},
                    {"ApplicationName", _actorService.Context.CodePackageActivationContext.ApplicationName},
                    {"ServiceTypeName", _actorService.Context.ServiceTypeName},
                    {"ServiceName", _actorService.Context.ServiceName.ToString()},
                    {"PartitionId", _actorService.Context.PartitionId.ToString()},
                    {"ReplicaOrInstanceId", _actorService.Context.ReplicaId.ToString()},
                    {"NodeName", _actorService.Context.NodeContext.NodeName},
                    {"CorrelationId", FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["correlationId"]},
                    {"UserId", FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["userId"]},
                    {"RequestUri", FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["requestUri"]},
                    {"Name", name},
                    {"Title", title}
	            });
    
		}



		public System.IDisposable RunAsyncLoop(
			)
		{
			PersonActorServiceEventSource.Current.StartRunAsyncLoop(
				_actorService, 
				_context
			);

			var runAsyncLoopOperationHolder = _telemetryClient.StartOperation<RequestTelemetry>(FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["requestUri"] ?? "runAsyncLoop");
			runAsyncLoopOperationHolder.Telemetry.Properties.Add("ActorType", _actorService.ActorTypeInformation.ImplementationType.ToString());
			runAsyncLoopOperationHolder.Telemetry.Properties.Add("ApplicationTypeName", _actorService.Context.CodePackageActivationContext.ApplicationTypeName);
			runAsyncLoopOperationHolder.Telemetry.Properties.Add("ApplicationName", _actorService.Context.CodePackageActivationContext.ApplicationName);
			runAsyncLoopOperationHolder.Telemetry.Properties.Add("ServiceTypeName", _actorService.Context.ServiceTypeName);
			runAsyncLoopOperationHolder.Telemetry.Properties.Add("ServiceName", _actorService.Context.ServiceName.ToString());
			runAsyncLoopOperationHolder.Telemetry.Properties.Add("PartitionId", _actorService.Context.PartitionId.ToString());
			runAsyncLoopOperationHolder.Telemetry.Properties.Add("ReplicaOrInstanceId", _actorService.Context.ReplicaId.ToString());
			runAsyncLoopOperationHolder.Telemetry.Properties.Add("NodeName", _actorService.Context.NodeContext.NodeName);
			runAsyncLoopOperationHolder.Telemetry.Properties.Add("CorrelationId", FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["correlationId"]);
			runAsyncLoopOperationHolder.Telemetry.Properties.Add("UserId", FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["userId"]);
			runAsyncLoopOperationHolder.Telemetry.Properties.Add("RequestUri", FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["requestUri"]);
			return new ScopeWrapper<RequestTelemetry>(_telemetryClient, runAsyncLoopOperationHolder, () => StopRunAsyncLoop());
    
		}



		public void StopRunAsyncLoop(
			)
		{
			PersonActorServiceEventSource.Current.StopRunAsyncLoop(
				_actorService, 
				_context
			);
    
		}



		public void RunAsyncLoopFailed(
			System.Exception ex)
		{
			PersonActorServiceEventSource.Current.RunAsyncLoopFailed(
				_actorService, 
				_context, 
				ex
			);
			_telemetryClient.TrackException(
	            ex,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "RunAsyncLoopFailed" },
	                {"ActorType", _actorService.ActorTypeInformation.ImplementationType.ToString()},
                    {"ApplicationTypeName", _actorService.Context.CodePackageActivationContext.ApplicationTypeName},
                    {"ApplicationName", _actorService.Context.CodePackageActivationContext.ApplicationName},
                    {"ServiceTypeName", _actorService.Context.ServiceTypeName},
                    {"ServiceName", _actorService.Context.ServiceName.ToString()},
                    {"PartitionId", _actorService.Context.PartitionId.ToString()},
                    {"ReplicaOrInstanceId", _actorService.Context.ReplicaId.ToString()},
                    {"NodeName", _actorService.Context.NodeContext.NodeName},
                    {"CorrelationId", FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["correlationId"]},
                    {"UserId", FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["userId"]},
                    {"RequestUri", FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["requestUri"]},
                    {"Message", ex.Message},
                    {"Source", ex.Source},
                    {"ExceptionTypeName", ex.GetType().FullName},
                    {"Exception", ex.AsJson()}
	            });
    
		}



	}
}
