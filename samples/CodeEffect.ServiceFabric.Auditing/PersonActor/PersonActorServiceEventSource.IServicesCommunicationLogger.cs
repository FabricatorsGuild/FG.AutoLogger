/*******************************************************************************************
*  This class is autogenerated from the class ServicesCommunicationLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Threading.Tasks;

namespace PersonActor
{
	internal sealed partial class PersonActorServiceEventSource
	{

		private const int StartActorMessageRecievedEventId = 1001;

		[Event(StartActorMessageRecievedEventId, Level = EventLevel.LogAlways, Message = "Start Actor Message Recieved {7} {8} {9}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Start)]
		private void StartActorMessageRecieved(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string methodName, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				StartActorMessageRecievedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				methodName, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void StartActorMessageRecieved(
			System.Fabric.StatefulServiceContext context, 
			string methodName, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			if (this.IsEnabled())
			{
				StartActorMessageRecieved(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					methodName, 
					headers?.GetHeader("name"), 
					headers?.GetHeader("correlation-id"));
			}
		}


		private const int StopActorMessageRecievedEventId = 2002;

		[Event(StopActorMessageRecievedEventId, Level = EventLevel.LogAlways, Message = "Stop Actor Message Recieved {7} {8} {9}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Stop)]
		private void StopActorMessageRecieved(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string methodName, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				StopActorMessageRecievedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				methodName, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void StopActorMessageRecieved(
			System.Fabric.StatefulServiceContext context, 
			string methodName, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			if (this.IsEnabled())
			{
				StopActorMessageRecieved(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					methodName, 
					headers?.GetHeader("name"), 
					headers?.GetHeader("correlation-id"));
			}
		}


		private const int ActorMessageDispatchedEventId = 3003;

		[Event(ActorMessageDispatchedEventId, Level = EventLevel.LogAlways, Message = "Actor Message Dispatched {7} {8} {9}", Keywords = Keywords.ServicesCommunication)]
		private void ActorMessageDispatched(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string methodName, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				ActorMessageDispatchedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				methodName, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void ActorMessageDispatched(
			System.Fabric.StatefulServiceContext context, 
			string methodName, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			if (this.IsEnabled())
			{
				ActorMessageDispatched(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					methodName, 
					headers?.GetHeader("name"), 
					headers?.GetHeader("correlation-id"));
			}
		}


		private const int ActorMessageFailedEventId = 4004;

		[Event(ActorMessageFailedEventId, Level = EventLevel.LogAlways, Message = "{10}", Keywords = Keywords.ServicesCommunication)]
		private void ActorMessageFailed(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string methodName, 
			string user, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				ActorMessageFailedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				methodName, 
				user, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void ActorMessageFailed(
			System.Fabric.StatefulServiceContext context, 
			string methodName, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				ActorMessageFailed(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					methodName, 
					headers?.GetHeader("name"), 
					headers?.GetHeader("correlation-id"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int ActorMessageHandledEventId = 5005;

		[Event(ActorMessageHandledEventId, Level = EventLevel.LogAlways, Message = "Actor Message Handled {7} {8} {9}", Keywords = Keywords.ServicesCommunication)]
		private void ActorMessageHandled(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string methodName, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				ActorMessageHandledEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				methodName, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void ActorMessageHandled(
			System.Fabric.StatefulServiceContext context, 
			string methodName, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			if (this.IsEnabled())
			{
				ActorMessageHandled(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					methodName, 
					headers?.GetHeader("name"), 
					headers?.GetHeader("correlation-id"));
			}
		}


		private const int StartRecieveActorMessageEventId = 6006;

		[Event(StartRecieveActorMessageEventId, Level = EventLevel.LogAlways, Message = "Start Recieve Actor Message {7} {8} {9} {10} {11} {12}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Start)]
		private void StartRecieveActorMessage(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				StartRecieveActorMessageEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void StartRecieveActorMessage(
			System.Fabric.StatefulServiceContext context, 
			System.Uri requestUri, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StartRecieveActorMessage(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("name"), 
					customServiceRequestHeader?.GetHeader("correlation-id"));
			}
		}


		private const int StopRecieveActorMessageEventId = 7007;

		[Event(StopRecieveActorMessageEventId, Level = EventLevel.LogAlways, Message = "Stop Recieve Actor Message {7} {8} {9} {10} {11} {12}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Stop)]
		private void StopRecieveActorMessage(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				StopRecieveActorMessageEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void StopRecieveActorMessage(
			System.Fabric.StatefulServiceContext context, 
			System.Uri requestUri, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StopRecieveActorMessage(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("name"), 
					customServiceRequestHeader?.GetHeader("correlation-id"));
			}
		}


		private const int RecieveActorMessageFailedEventId = 8008;

		[Event(RecieveActorMessageFailedEventId, Level = EventLevel.LogAlways, Message = "{13}", Keywords = Keywords.ServicesCommunication)]
		private void RecieveActorMessageFailed(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string user, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				RecieveActorMessageFailedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				user, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void RecieveActorMessageFailed(
			System.Fabric.StatefulServiceContext context, 
			System.Uri requestUri, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				RecieveActorMessageFailed(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("name"), 
					customServiceRequestHeader?.GetHeader("correlation-id"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FailedToGetActorMethodNameEventId = 9009;

		[Event(FailedToGetActorMethodNameEventId, Level = EventLevel.LogAlways, Message = "{10}", Keywords = Keywords.ServicesCommunication)]
		private void FailedToGetActorMethodName(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToGetActorMethodNameEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToGetActorMethodName(
			System.Fabric.StatefulServiceContext context, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToGetActorMethodName(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FailedToReadActorMessageHeadersEventId = 10010;

		[Event(FailedToReadActorMessageHeadersEventId, Level = EventLevel.LogAlways, Message = "{8}", Keywords = Keywords.ServicesCommunication)]
		private void FailedToReadActorMessageHeaders(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string serviceRemotingMessageHeaders, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToReadActorMessageHeadersEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				serviceRemotingMessageHeaders, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToReadActorMessageHeaders(
			System.Fabric.StatefulServiceContext context, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceRemotingMessageHeaders, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToReadActorMessageHeaders(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					serviceRemotingMessageHeaders.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int StartRecieveServiceMessageEventId = 11011;

		[Event(StartRecieveServiceMessageEventId, Level = EventLevel.LogAlways, Message = "Start Recieve Service Message {7} {8} {9} {10} {11} {12}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Start)]
		private void StartRecieveServiceMessage(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				StartRecieveServiceMessageEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void StartRecieveServiceMessage(
			System.Fabric.StatefulServiceContext context, 
			System.Uri requestUri, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StartRecieveServiceMessage(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("name"), 
					customServiceRequestHeader?.GetHeader("correlation-id"));
			}
		}


		private const int StopRecieveServiceMessageEventId = 12012;

		[Event(StopRecieveServiceMessageEventId, Level = EventLevel.LogAlways, Message = "Stop Recieve Service Message {7} {8} {9} {10} {11} {12}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Stop)]
		private void StopRecieveServiceMessage(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				StopRecieveServiceMessageEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void StopRecieveServiceMessage(
			System.Fabric.StatefulServiceContext context, 
			System.Uri requestUri, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StopRecieveServiceMessage(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("name"), 
					customServiceRequestHeader?.GetHeader("correlation-id"));
			}
		}


		private const int RecieveServiceMessageFailedEventId = 13013;

		[Event(RecieveServiceMessageFailedEventId, Level = EventLevel.LogAlways, Message = "{13}", Keywords = Keywords.ServicesCommunication)]
		private void RecieveServiceMessageFailed(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string user, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				RecieveServiceMessageFailedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				user, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void RecieveServiceMessageFailed(
			System.Fabric.StatefulServiceContext context, 
			System.Uri requestUri, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				RecieveServiceMessageFailed(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("name"), 
					customServiceRequestHeader?.GetHeader("correlation-id"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FailedToGetServiceMethodNameEventId = 14014;

		[Event(FailedToGetServiceMethodNameEventId, Level = EventLevel.LogAlways, Message = "{9}", Keywords = Keywords.ServicesCommunication)]
		private void FailedToGetServiceMethodName(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			int interfaceId, 
			int methodId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToGetServiceMethodNameEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				interfaceId, 
				methodId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToGetServiceMethodName(
			System.Fabric.StatefulServiceContext context, 
			int interfaceId, 
			int methodId, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToGetServiceMethodName(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					interfaceId, 
					methodId, 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FailedToReadCustomServiceMessageHeaderEventId = 15015;

		[Event(FailedToReadCustomServiceMessageHeaderEventId, Level = EventLevel.LogAlways, Message = "{8}", Keywords = Keywords.ServicesCommunication)]
		private void FailedToReadCustomServiceMessageHeader(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string serviceRemotingMessageHeaders, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToReadCustomServiceMessageHeaderEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				serviceRemotingMessageHeaders, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToReadCustomServiceMessageHeader(
			System.Fabric.StatefulServiceContext context, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceRemotingMessageHeaders, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToReadCustomServiceMessageHeader(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					serviceRemotingMessageHeaders.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int StartMessageRecievedEventId = 16016;

		[Event(StartMessageRecievedEventId, Level = EventLevel.LogAlways, Message = "Start Message Recieved {7} {8} {9}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Start)]
		private void StartMessageRecieved(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string methodName, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				StartMessageRecievedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				methodName, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void StartMessageRecieved(
			System.Fabric.StatefulServiceContext context, 
			string methodName, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			if (this.IsEnabled())
			{
				StartMessageRecieved(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					methodName, 
					headers?.GetHeader("name"), 
					headers?.GetHeader("correlation-id"));
			}
		}


		private const int StopMessageRecievedEventId = 17017;

		[Event(StopMessageRecievedEventId, Level = EventLevel.LogAlways, Message = "Stop Message Recieved {7} {8} {9}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Stop)]
		private void StopMessageRecieved(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string methodName, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				StopMessageRecievedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				methodName, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void StopMessageRecieved(
			System.Fabric.StatefulServiceContext context, 
			string methodName, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			if (this.IsEnabled())
			{
				StopMessageRecieved(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					methodName, 
					headers?.GetHeader("name"), 
					headers?.GetHeader("correlation-id"));
			}
		}


		private const int MessageDispatchedEventId = 18018;

		[Event(MessageDispatchedEventId, Level = EventLevel.LogAlways, Message = "Message Dispatched {7} {8} {9}", Keywords = Keywords.ServicesCommunication)]
		private void MessageDispatched(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string methodName, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				MessageDispatchedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				methodName, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void MessageDispatched(
			System.Fabric.StatefulServiceContext context, 
			string methodName, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			if (this.IsEnabled())
			{
				MessageDispatched(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					methodName, 
					headers?.GetHeader("name"), 
					headers?.GetHeader("correlation-id"));
			}
		}


		private const int MessageFailedEventId = 19019;

		[Event(MessageFailedEventId, Level = EventLevel.LogAlways, Message = "{10}", Keywords = Keywords.ServicesCommunication)]
		private void MessageFailed(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string methodName, 
			string user, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				MessageFailedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				methodName, 
				user, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void MessageFailed(
			System.Fabric.StatefulServiceContext context, 
			string methodName, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				MessageFailed(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					methodName, 
					headers?.GetHeader("name"), 
					headers?.GetHeader("correlation-id"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int MessageHandledEventId = 20020;

		[Event(MessageHandledEventId, Level = EventLevel.LogAlways, Message = "Message Handled {7} {8} {9}", Keywords = Keywords.ServicesCommunication)]
		private void MessageHandled(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string methodName, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				MessageHandledEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				methodName, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void MessageHandled(
			System.Fabric.StatefulServiceContext context, 
			string methodName, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			if (this.IsEnabled())
			{
				MessageHandled(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					methodName, 
					headers?.GetHeader("name"), 
					headers?.GetHeader("correlation-id"));
			}
		}


		private const int StartCallServiceEventId = 21021;

		[Event(StartCallServiceEventId, Level = EventLevel.LogAlways, Message = "Start Call Service {7} {8} {9} {10} {11} {12}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Start)]
		private void StartCallService(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				StartCallServiceEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void StartCallService(
			System.Fabric.StatefulServiceContext context, 
			System.Uri requestUri, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StartCallService(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("name"), 
					customServiceRequestHeader?.GetHeader("correlation-id"));
			}
		}


		private const int StopCallServiceEventId = 22022;

		[Event(StopCallServiceEventId, Level = EventLevel.LogAlways, Message = "Stop Call Service {7} {8} {9} {10} {11} {12}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Stop)]
		private void StopCallService(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				StopCallServiceEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void StopCallService(
			System.Fabric.StatefulServiceContext context, 
			System.Uri requestUri, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StopCallService(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("name"), 
					customServiceRequestHeader?.GetHeader("correlation-id"));
			}
		}


		private const int CallServiceFailedEventId = 23023;

		[Event(CallServiceFailedEventId, Level = EventLevel.LogAlways, Message = "{13}", Keywords = Keywords.ServicesCommunication)]
		private void CallServiceFailed(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			int InterfaceId, 
			int MethodId, 
			string ActorId, 
			string user, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				CallServiceFailedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				InterfaceId, 
				MethodId, 
				ActorId, 
				user, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void CallServiceFailed(
			System.Fabric.StatefulServiceContext context, 
			System.Uri requestUri, 
			CodeEffect.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				CallServiceFailed(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("name"), 
					customServiceRequestHeader?.GetHeader("correlation-id"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int StartMessageSendEventId = 24024;

		[Event(StartMessageSendEventId, Level = EventLevel.LogAlways, Message = "Start Message Send {7} {8} {9}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Start)]
		private void StartMessageSend(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				StartMessageSendEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void StartMessageSend(
			System.Fabric.StatefulServiceContext context, 
			System.Uri requestUri, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			if (this.IsEnabled())
			{
				StartMessageSend(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					headers?.GetHeader("name"), 
					headers?.GetHeader("correlation-id"));
			}
		}


		private const int StopMessageSendEventId = 25025;

		[Event(StopMessageSendEventId, Level = EventLevel.LogAlways, Message = "Stop Message Send {7} {8} {9}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Stop)]
		private void StopMessageSend(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string user, 
			string correlationId)
		{
			WriteEvent(
				StopMessageSendEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				user, 
				correlationId);
		}

		[NonEvent]
		public void StopMessageSend(
			System.Fabric.StatefulServiceContext context, 
			System.Uri requestUri, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader headers)
		{
			if (this.IsEnabled())
			{
				StopMessageSend(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					headers?.GetHeader("name"), 
					headers?.GetHeader("correlation-id"));
			}
		}


		private const int FailedtoSendMessageEventId = 26026;

		[Event(FailedtoSendMessageEventId, Level = EventLevel.LogAlways, Message = "{10}", Keywords = Keywords.ServicesCommunication)]
		private void FailedtoSendMessage(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string requestUri, 
			string user, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedtoSendMessageEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				requestUri, 
				user, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedtoSendMessage(
			System.Fabric.StatefulServiceContext context, 
			System.Uri requestUri, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader header, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedtoSendMessage(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					requestUri.ToString(), 
					header?.GetHeader("name"), 
					header?.GetHeader("correlation-id"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int StartRequestContextEventId = 27027;

		[Event(StartRequestContextEventId, Level = EventLevel.LogAlways, Message = "Start Request Context {7}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Start)]
		private void StartRequestContext(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string headers)
		{
			WriteEvent(
				StartRequestContextEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				headers);
		}

		[NonEvent]
		public void StartRequestContext(
			System.Fabric.StatefulServiceContext context, 
			System.Collections.Generic.IEnumerable<CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestHeader> headers)
		{
			if (this.IsEnabled())
			{
				StartRequestContext(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					headers.ToString());
			}
		}


		private const int StopRequestContextEventId = 28028;

		[Event(StopRequestContextEventId, Level = EventLevel.LogAlways, Message = "Stop Request Context {7}", Keywords = Keywords.ServicesCommunication, Opcode = EventOpcode.Stop)]
		private void StopRequestContext(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string headers)
		{
			WriteEvent(
				StopRequestContextEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				headers);
		}

		[NonEvent]
		public void StopRequestContext(
			System.Fabric.StatefulServiceContext context, 
			System.Collections.Generic.IEnumerable<CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestHeader> headers)
		{
			if (this.IsEnabled())
			{
				StopRequestContext(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					headers.ToString());
			}
		}


		private const int FailedRequestContextEventId = 29029;

		[Event(FailedRequestContextEventId, Level = EventLevel.LogAlways, Message = "{8}", Keywords = Keywords.ServicesCommunication)]
		private void FailedRequestContext(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string headers, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedRequestContextEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				headers, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedRequestContext(
			System.Fabric.StatefulServiceContext context, 
			System.Collections.Generic.IEnumerable<CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestHeader> headers, 
			System.Exception exception)
		{
			if (this.IsEnabled())
			{
				FailedRequestContext(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					headers.ToString(), 
					exception.Message, 
					exception.Source, 
					exception.GetType().FullName, 
					exception.AsJson());
			}
		}


		private const int EnumeratingPartitionsEventId = 30030;

		[Event(EnumeratingPartitionsEventId, Level = EventLevel.LogAlways, Message = "Enumerating Partitions {7}", Keywords = Keywords.ServicesCommunication)]
		private void EnumeratingPartitions(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string serviceUri)
		{
			WriteEvent(
				EnumeratingPartitionsEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				serviceUri);
		}

		[NonEvent]
		public void EnumeratingPartitions(
			System.Fabric.StatefulServiceContext context, 
			System.Uri serviceUri)
		{
			if (this.IsEnabled())
			{
				EnumeratingPartitions(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					serviceUri.ToString());
			}
		}


		private const int FailedToEnumeratePartitionsEventId = 31031;

		[Event(FailedToEnumeratePartitionsEventId, Level = EventLevel.LogAlways, Message = "{8}", Keywords = Keywords.ServicesCommunication)]
		private void FailedToEnumeratePartitions(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string serviceUri, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToEnumeratePartitionsEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				serviceUri, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToEnumeratePartitions(
			System.Fabric.StatefulServiceContext context, 
			System.Uri serviceUri, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToEnumeratePartitions(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					serviceUri.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int EnumeratedExistingPartitionsEventId = 32032;

		[Event(EnumeratedExistingPartitionsEventId, Level = EventLevel.LogAlways, Message = "Enumerated Existing Partitions {7} {8}", Keywords = Keywords.ServicesCommunication)]
		private void EnumeratedExistingPartitions(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string serviceUri, 
			string partitions)
		{
			WriteEvent(
				EnumeratedExistingPartitionsEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				serviceUri, 
				partitions);
		}

		[NonEvent]
		public void EnumeratedExistingPartitions(
			System.Fabric.StatefulServiceContext context, 
			System.Uri serviceUri, 
			System.Collections.Generic.IEnumerable<System.Fabric.Int64RangePartitionInformation> partitions)
		{
			if (this.IsEnabled())
			{
				EnumeratedExistingPartitions(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					serviceUri.ToString(), 
					partitions.ToString());
			}
		}


		private const int EnumeratedAndCachedPartitionsEventId = 33033;

		[Event(EnumeratedAndCachedPartitionsEventId, Level = EventLevel.LogAlways, Message = "Enumerated And Cached Partitions {7} {8}", Keywords = Keywords.ServicesCommunication)]
		private void EnumeratedAndCachedPartitions(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			string serviceUri, 
			string partitions)
		{
			WriteEvent(
				EnumeratedAndCachedPartitionsEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				serviceUri, 
				partitions);
		}

		[NonEvent]
		public void EnumeratedAndCachedPartitions(
			System.Fabric.StatefulServiceContext context, 
			System.Uri serviceUri, 
			System.Collections.Generic.IEnumerable<System.Fabric.Int64RangePartitionInformation> partitions)
		{
			if (this.IsEnabled())
			{
				EnumeratedAndCachedPartitions(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.ReplicaOrInstanceId, 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					serviceUri.ToString(), 
					partitions.ToString());
			}
		}


	}
}