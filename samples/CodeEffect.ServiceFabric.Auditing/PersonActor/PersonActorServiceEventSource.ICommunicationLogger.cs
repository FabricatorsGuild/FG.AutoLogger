/*******************************************************************************************
*  This class is autogenerated from the class CommunicationLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Threading.Tasks;

namespace PersonActor
{
	internal sealed partial class PersonActorServiceEventSource
	{

		private const int StartRecieveActorMessageEventId = 1001;

		[Event(StartRecieveActorMessageEventId, Level = EventLevel.LogAlways, Message = "Start Recieve Actor Message {8} {9} {10} {11} {12} {13} {14}", Keywords = Keywords.Communication, Opcode = EventOpcode.Start, Task = Tasks.RecieveActorMessage)]
		private void StartRecieveActorMessage(
			string actorType, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string requestUri, 
			string actorMethodName, 
			int interfaceId, 
			int methodId, 
			string actorId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StartRecieveActorMessageEventId, 
				actorType, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				requestUri, 
				actorMethodName, 
				interfaceId, 
				methodId, 
				actorId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StartRecieveActorMessage(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri requestUri, 
			string actorMethodName, 
			FG.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StartRecieveActorMessage(
					actor.ActorType.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					requestUri.ToString(), 
					actorMethodName, 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int StopRecieveActorMessageEventId = 2002;

		[Event(StopRecieveActorMessageEventId, Level = EventLevel.LogAlways, Message = "Stop Recieve Actor Message {8} {9} {10} {11} {12} {13} {14}", Keywords = Keywords.Communication, Opcode = EventOpcode.Stop, Task = Tasks.RecieveActorMessage)]
		private void StopRecieveActorMessage(
			string actorType, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string requestUri, 
			string actorMethodName, 
			int interfaceId, 
			int methodId, 
			string actorId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StopRecieveActorMessageEventId, 
				actorType, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				requestUri, 
				actorMethodName, 
				interfaceId, 
				methodId, 
				actorId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StopRecieveActorMessage(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri requestUri, 
			string actorMethodName, 
			FG.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StopRecieveActorMessage(
					actor.ActorType.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					requestUri.ToString(), 
					actorMethodName, 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int RecieveActorMessageFailedEventId = 3003;

		[Event(RecieveActorMessageFailedEventId, Level = EventLevel.LogAlways, Message = "{15}", Keywords = Keywords.Communication)]
		private void RecieveActorMessageFailed(
			string actorType, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string requestUri, 
			string actorMethodName, 
			int interfaceId, 
			int methodId, 
			string actorId, 
			string userId, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				RecieveActorMessageFailedEventId, 
				actorType, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				requestUri, 
				actorMethodName, 
				interfaceId, 
				methodId, 
				actorId, 
				userId, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void RecieveActorMessageFailed(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri requestUri, 
			string actorMethodName, 
			FG.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				RecieveActorMessageFailed(
					actor.ActorType.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					requestUri.ToString(), 
					actorMethodName, 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FailedToGetActorMethodNameEventId = 4004;

		[Event(FailedToGetActorMethodNameEventId, Level = EventLevel.LogAlways, Message = "{11}", Keywords = Keywords.Communication)]
		private void FailedToGetActorMethodName(
			string actorType, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			int interfaceId, 
			int methodId, 
			string actorId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToGetActorMethodNameEventId, 
				actorType, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				interfaceId, 
				methodId, 
				actorId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToGetActorMethodName(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			FG.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToGetActorMethodName(
					actor.ActorType.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FailedToReadActorMessageHeadersEventId = 5005;

		[Event(FailedToReadActorMessageHeadersEventId, Level = EventLevel.LogAlways, Message = "{11}", Keywords = Keywords.Communication)]
		private void FailedToReadActorMessageHeaders(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			int InterfaceId, 
			int MethodId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToReadActorMessageHeadersEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				InterfaceId, 
				MethodId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToReadActorMessageHeaders(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceRemotingMessageHeaders, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToReadActorMessageHeaders(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					(serviceRemotingMessageHeaders?.InterfaceId ?? 0), 
					(serviceRemotingMessageHeaders?.MethodId ?? 0), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int StartRecieveServiceMessageEventId = 6006;

		[Event(StartRecieveServiceMessageEventId, Level = EventLevel.LogAlways, Message = "Start Recieve Service Message {9} {10} {11} {12} {13} {14}", Keywords = Keywords.Communication, Opcode = EventOpcode.Start, Task = Tasks.RecieveServiceMessage)]
		private void StartRecieveServiceMessage(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string requestUri, 
			string serviceMethodName, 
			int InterfaceId, 
			int MethodId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StartRecieveServiceMessageEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				requestUri, 
				serviceMethodName, 
				InterfaceId, 
				MethodId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StartRecieveServiceMessage(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StartRecieveServiceMessage(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					requestUri.ToString(), 
					serviceMethodName, 
					(serviceMessageHeaders?.InterfaceId ?? 0), 
					(serviceMessageHeaders?.MethodId ?? 0), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int StopRecieveServiceMessageEventId = 7007;

		[Event(StopRecieveServiceMessageEventId, Level = EventLevel.LogAlways, Message = "Stop Recieve Service Message {9} {10} {11} {12} {13} {14}", Keywords = Keywords.Communication, Opcode = EventOpcode.Stop, Task = Tasks.RecieveServiceMessage)]
		private void StopRecieveServiceMessage(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string requestUri, 
			string serviceMethodName, 
			int InterfaceId, 
			int MethodId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StopRecieveServiceMessageEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				requestUri, 
				serviceMethodName, 
				InterfaceId, 
				MethodId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StopRecieveServiceMessage(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StopRecieveServiceMessage(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					requestUri.ToString(), 
					serviceMethodName, 
					(serviceMessageHeaders?.InterfaceId ?? 0), 
					(serviceMessageHeaders?.MethodId ?? 0), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int RecieveServiceMessageFailedEventId = 8008;

		[Event(RecieveServiceMessageFailedEventId, Level = EventLevel.LogAlways, Message = "{15}", Keywords = Keywords.Communication)]
		private void RecieveServiceMessageFailed(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string requestUri, 
			string serviceMethodName, 
			int InterfaceId, 
			int MethodId, 
			string userId, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				RecieveServiceMessageFailedEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				requestUri, 
				serviceMethodName, 
				InterfaceId, 
				MethodId, 
				userId, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void RecieveServiceMessageFailed(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				RecieveServiceMessageFailed(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					requestUri.ToString(), 
					serviceMethodName, 
					(serviceMessageHeaders?.InterfaceId ?? 0), 
					(serviceMessageHeaders?.MethodId ?? 0), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FailedToGetServiceMethodNameEventId = 9009;

		[Event(FailedToGetServiceMethodNameEventId, Level = EventLevel.LogAlways, Message = "{12}", Keywords = Keywords.Communication)]
		private void FailedToGetServiceMethodName(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string requestUri, 
			int interfaceId, 
			int methodId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToGetServiceMethodNameEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				requestUri, 
				interfaceId, 
				methodId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToGetServiceMethodName(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri requestUri, 
			int interfaceId, 
			int methodId, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToGetServiceMethodName(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					requestUri.ToString(), 
					interfaceId, 
					methodId, 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int StartRequestContextEventId = 10010;

		[Event(StartRequestContextEventId, Level = EventLevel.LogAlways, Message = "Start Request Context {9}", Keywords = Keywords.Communication, Opcode = EventOpcode.Start)]
		private void StartRequestContext(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string headers)
		{
			WriteEvent(
				StartRequestContextEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				headers);
		}

		[NonEvent]
		public void StartRequestContext(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Collections.Generic.IEnumerable<FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestHeader> headers)
		{
			if (this.IsEnabled())
			{
				StartRequestContext(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					headers.ToString());
			}
		}


		private const int StopRequestContextEventId = 11011;

		[Event(StopRequestContextEventId, Level = EventLevel.LogAlways, Message = "Stop Request Context {9}", Keywords = Keywords.Communication, Opcode = EventOpcode.Stop)]
		private void StopRequestContext(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string headers)
		{
			WriteEvent(
				StopRequestContextEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				headers);
		}

		[NonEvent]
		public void StopRequestContext(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Collections.Generic.IEnumerable<FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestHeader> headers)
		{
			if (this.IsEnabled())
			{
				StopRequestContext(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					headers.ToString());
			}
		}


		private const int FailedRequestContextEventId = 12012;

		[Event(FailedRequestContextEventId, Level = EventLevel.LogAlways, Message = "{10}", Keywords = Keywords.Communication)]
		private void FailedRequestContext(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string headers, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedRequestContextEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				headers, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedRequestContext(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Collections.Generic.IEnumerable<FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestHeader> headers, 
			System.Exception exception)
		{
			if (this.IsEnabled())
			{
				FailedRequestContext(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					headers.ToString(), 
					exception.Message, 
					exception.Source, 
					exception.GetType().FullName, 
					exception.AsJson());
			}
		}


		private const int FailedToReadCustomServiceMessageHeaderEventId = 13013;

		[Event(FailedToReadCustomServiceMessageHeaderEventId, Level = EventLevel.LogAlways, Message = "{11}", Keywords = Keywords.Communication)]
		private void FailedToReadCustomServiceMessageHeader(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			int InterfaceId, 
			int MethodId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToReadCustomServiceMessageHeaderEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				InterfaceId, 
				MethodId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToReadCustomServiceMessageHeader(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceRemotingMessageHeaders, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToReadCustomServiceMessageHeader(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					(serviceRemotingMessageHeaders?.InterfaceId ?? 0), 
					(serviceRemotingMessageHeaders?.MethodId ?? 0), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int EnumeratingPartitionsEventId = 14014;

		[Event(EnumeratingPartitionsEventId, Level = EventLevel.LogAlways, Message = "Enumerating Partitions {9}", Keywords = Keywords.Communication)]
		private void EnumeratingPartitions(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string serviceUri)
		{
			WriteEvent(
				EnumeratingPartitionsEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				serviceUri);
		}

		[NonEvent]
		public void EnumeratingPartitions(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri serviceUri)
		{
			if (this.IsEnabled())
			{
				EnumeratingPartitions(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					serviceUri.ToString());
			}
		}


		private const int FailedToEnumeratePartitionsEventId = 15015;

		[Event(FailedToEnumeratePartitionsEventId, Level = EventLevel.LogAlways, Message = "{10}", Keywords = Keywords.Communication)]
		private void FailedToEnumeratePartitions(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string serviceUri, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToEnumeratePartitionsEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				serviceUri, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToEnumeratePartitions(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri serviceUri, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToEnumeratePartitions(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					serviceUri.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int EnumeratedExistingPartitionsEventId = 16016;

		[Event(EnumeratedExistingPartitionsEventId, Level = EventLevel.LogAlways, Message = "Enumerated Existing Partitions {9} {10}", Keywords = Keywords.Communication)]
		private void EnumeratedExistingPartitions(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string serviceUri, 
			string partitions)
		{
			WriteEvent(
				EnumeratedExistingPartitionsEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				serviceUri, 
				partitions);
		}

		[NonEvent]
		public void EnumeratedExistingPartitions(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri serviceUri, 
			System.Collections.Generic.IEnumerable<System.Fabric.ServicePartitionInformation> partitions)
		{
			if (this.IsEnabled())
			{
				EnumeratedExistingPartitions(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					serviceUri.ToString(), 
					partitions.ToString());
			}
		}


		private const int EnumeratedAndCachedPartitionsEventId = 17017;

		[Event(EnumeratedAndCachedPartitionsEventId, Level = EventLevel.LogAlways, Message = "Enumerated And Cached Partitions {9} {10}", Keywords = Keywords.Communication)]
		private void EnumeratedAndCachedPartitions(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string serviceUri, 
			string partitions)
		{
			WriteEvent(
				EnumeratedAndCachedPartitionsEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				serviceUri, 
				partitions);
		}

		[NonEvent]
		public void EnumeratedAndCachedPartitions(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri serviceUri, 
			System.Collections.Generic.IEnumerable<System.Fabric.ServicePartitionInformation> partitions)
		{
			if (this.IsEnabled())
			{
				EnumeratedAndCachedPartitions(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					serviceUri.ToString(), 
					partitions.ToString());
			}
		}


		private const int StartCallActorEventId = 18018;

		[Event(StartCallActorEventId, Level = EventLevel.LogAlways, Message = "Start Call Actor {8} {9} {10} {11} {12} {13} {14}", Keywords = Keywords.Communication, Opcode = EventOpcode.Start, Task = Tasks.CallActor)]
		private void StartCallActor(
			string actorType, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string requestUri, 
			string actorMethodName, 
			int interfaceId, 
			int methodId, 
			string actorId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StartCallActorEventId, 
				actorType, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				requestUri, 
				actorMethodName, 
				interfaceId, 
				methodId, 
				actorId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StartCallActor(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri requestUri, 
			string actorMethodName, 
			FG.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StartCallActor(
					actor.ActorType.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					requestUri.ToString(), 
					actorMethodName, 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int StopCallActorEventId = 19019;

		[Event(StopCallActorEventId, Level = EventLevel.LogAlways, Message = "Stop Call Actor {8} {9} {10} {11} {12} {13} {14}", Keywords = Keywords.Communication, Opcode = EventOpcode.Stop, Task = Tasks.CallActor)]
		private void StopCallActor(
			string actorType, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string requestUri, 
			string actorMethodName, 
			int interfaceId, 
			int methodId, 
			string actorId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StopCallActorEventId, 
				actorType, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				requestUri, 
				actorMethodName, 
				interfaceId, 
				methodId, 
				actorId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StopCallActor(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri requestUri, 
			string actorMethodName, 
			FG.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StopCallActor(
					actor.ActorType.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					requestUri.ToString(), 
					actorMethodName, 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int CallActorFailedEventId = 20020;

		[Event(CallActorFailedEventId, Level = EventLevel.LogAlways, Message = "{15}", Keywords = Keywords.Communication)]
		private void CallActorFailed(
			string actorType, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string requestUri, 
			string actorMethodName, 
			int interfaceId, 
			int methodId, 
			string actorId, 
			string userId, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				CallActorFailedEventId, 
				actorType, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				requestUri, 
				actorMethodName, 
				interfaceId, 
				methodId, 
				actorId, 
				userId, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void CallActorFailed(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri requestUri, 
			string actorMethodName, 
			FG.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				CallActorFailed(
					actor.ActorType.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					requestUri.ToString(), 
					actorMethodName, 
					(actorMessageHeaders?.InterfaceId ?? 0), 
					(actorMessageHeaders?.MethodId ?? 0), 
					actorMessageHeaders?.ActorId.ToString(), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int StartCallServiceEventId = 21021;

		[Event(StartCallServiceEventId, Level = EventLevel.LogAlways, Message = "Start Call Service {9} {10} {11} {12} {13} {14}", Keywords = Keywords.Communication, Opcode = EventOpcode.Start, Task = Tasks.CallService)]
		private void StartCallService(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string requestUri, 
			string serviceMethodName, 
			int InterfaceId, 
			int MethodId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StartCallServiceEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				requestUri, 
				serviceMethodName, 
				InterfaceId, 
				MethodId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StartCallService(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StartCallService(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					requestUri.ToString(), 
					serviceMethodName, 
					(serviceMessageHeaders?.InterfaceId ?? 0), 
					(serviceMessageHeaders?.MethodId ?? 0), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int StopCallServiceEventId = 22022;

		[Event(StopCallServiceEventId, Level = EventLevel.LogAlways, Message = "Stop Call Service {9} {10} {11} {12} {13} {14}", Keywords = Keywords.Communication, Opcode = EventOpcode.Stop, Task = Tasks.CallService)]
		private void StopCallService(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string requestUri, 
			string serviceMethodName, 
			int InterfaceId, 
			int MethodId, 
			string userId, 
			string correlationId)
		{
			WriteEvent(
				StopCallServiceEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				requestUri, 
				serviceMethodName, 
				InterfaceId, 
				MethodId, 
				userId, 
				correlationId);
		}

		[NonEvent]
		public void StopCallService(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StopCallService(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					requestUri.ToString(), 
					serviceMethodName, 
					(serviceMessageHeaders?.InterfaceId ?? 0), 
					(serviceMessageHeaders?.MethodId ?? 0), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"));
			}
		}


		private const int CallServiceFailedEventId = 23023;

		[Event(CallServiceFailedEventId, Level = EventLevel.LogAlways, Message = "{15}", Keywords = Keywords.Communication)]
		private void CallServiceFailed(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string requestUri, 
			string serviceMethodName, 
			int InterfaceId, 
			int MethodId, 
			string userId, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				CallServiceFailedEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				requestUri, 
				serviceMethodName, 
				InterfaceId, 
				MethodId, 
				userId, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void CallServiceFailed(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				CallServiceFailed(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					requestUri.ToString(), 
					serviceMethodName, 
					(serviceMessageHeaders?.InterfaceId ?? 0), 
					(serviceMessageHeaders?.MethodId ?? 0), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int ServiceClientFailedEventId = 24024;

		[Event(ServiceClientFailedEventId, Level = EventLevel.LogAlways, Message = "{12}", Keywords = Keywords.Communication)]
		private void ServiceClientFailed(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string requestUri, 
			string userId, 
			string correlationId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				ServiceClientFailedEventId, 
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				requestUri, 
				userId, 
				correlationId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void ServiceClientFailed(
			FG.ServiceFabric.Diagnostics.ActorOrActorServiceDescription actor, 
			System.Uri requestUri, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				ServiceClientFailed(
					actor.ActorType.ToString(), 
					actor.ActorId.ToString(), 
					actor.ApplicationTypeName, 
					actor.ApplicationName, 
					actor.ServiceTypeName, 
					actor.ToString(), 
					actor.PartitionId, 
					actor.ReplicaOrInstanceId, 
					actor.NodeName, 
					requestUri.ToString(), 
					customServiceRequestHeader?.GetHeader("userId"), 
					customServiceRequestHeader?.GetHeader("correlationId"), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


	}
}