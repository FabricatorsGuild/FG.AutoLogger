/*******************************************************************************************
*  This class is autogenerated from the class PersonActorServiceLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Threading.Tasks;

namespace PersonActor
{
	internal sealed partial class PersonActorServiceEventSource
	{

		private const int PersonGeneratedEventId = 201;

		[Event(PersonGeneratedEventId, Level = EventLevel.LogAlways, Message = "Person Generated {11} {12}", Keywords = Keywords.PersonActorService)]
		private void PersonGenerated(
			string actorType, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string correlationId, 
			string userId, 
			string requestId, 
			string name, 
			string title)
		{
			WriteEvent(
				PersonGeneratedEventId, 
				actorType, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				correlationId, 
				userId, 
				requestId, 
				name, 
				title);
		}

		[NonEvent]
		public void PersonGenerated(
			Microsoft.ServiceFabric.Actors.Runtime.ActorService actorService, 
			CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext context, 
			string name, 
			string title)
		{
			if (this.IsEnabled())
			{
				PersonGenerated(
					actorService.ActorTypeInformation.ImplementationType.ToString(), 
					actorService.Context.CodePackageActivationContext.ApplicationTypeName, 
					actorService.Context.CodePackageActivationContext.ApplicationName, 
					actorService.Context.ServiceTypeName, 
					actorService.Context.ServiceName.ToString(), 
					actorService.Context.PartitionId, 
					actorService.Context.ReplicaId, 
					actorService.Context.NodeContext.NodeName, 
					CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["correlationId"], 
					CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["userId"], 
					CodeEffect.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestContext.Current?["requestId"], 
					name, 
					title);
			}
		}


	}
}