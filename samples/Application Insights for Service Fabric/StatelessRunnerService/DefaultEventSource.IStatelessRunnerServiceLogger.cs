/*******************************************************************************************
*  This class is autogenerated from the class StatelessRunnerServiceLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Threading.Tasks;

namespace StatelessRunnerService
{
	internal sealed partial class DefaultEventSource
	{

		private const int StartRunAsyncLoopEventId = 1001;

		[Event(StartRunAsyncLoopEventId, Level = EventLevel.LogAlways, Message = "Start Run Async Loop {1} {2}", Keywords = Keywords.StatelessRunnerService, Opcode = EventOpcode.Start)]
		private void StartRunAsyncLoop(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			int iteration, 
			Guid correlationId)
		{
			WriteEvent(
				StartRunAsyncLoopEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				iteration, 
				correlationId);
		}

		[NonEvent]
		public void StartRunAsyncLoop(
			System.Fabric.ServiceContext context, 
			int iteration, 
			Guid correlationId)
		{
			if (this.IsEnabled())
			{
				StartRunAsyncLoop(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.GetReplicaOrInstanceId(), 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					iteration, 
					correlationId);
			}
		}


		private const int StopRunAsyncLoopEventId = 2002;

		[Event(StopRunAsyncLoopEventId, Level = EventLevel.LogAlways, Message = "Stop Run Async Loop", Keywords = Keywords.StatelessRunnerService, Opcode = EventOpcode.Stop)]
		private void StopRunAsyncLoop(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName)
		{
			WriteEvent(
				StopRunAsyncLoopEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName);
		}

		[NonEvent]
		public void StopRunAsyncLoop(
			System.Fabric.ServiceContext context)
		{
			if (this.IsEnabled())
			{
				StopRunAsyncLoop(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.GetReplicaOrInstanceId(), 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName);
			}
		}


		private const int RunAsyncWorkCompletedEventId = 3003;

		[Event(RunAsyncWorkCompletedEventId, Level = EventLevel.LogAlways, Message = "Run Async Work Completed {1}", Keywords = Keywords.StatelessRunnerService)]
		private void RunAsyncWorkCompleted(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			int iteration)
		{
			WriteEvent(
				RunAsyncWorkCompletedEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				iteration);
		}

		[NonEvent]
		public void RunAsyncWorkCompleted(
			System.Fabric.ServiceContext context, 
			int iteration)
		{
			if (this.IsEnabled())
			{
				RunAsyncWorkCompleted(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.GetReplicaOrInstanceId(), 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					iteration);
			}
		}


		private const int WaitingEventId = 4004;

		[Event(WaitingEventId, Level = EventLevel.LogAlways, Message = "Waiting {1}", Keywords = Keywords.StatelessRunnerService)]
		private void Waiting(
			string serviceName, 
			string serviceTypeName, 
			long replicaOrInstanceId, 
			Guid partitionId, 
			string applicationName, 
			string applicationTypeName, 
			string nodeName, 
			int milliseconds)
		{
			WriteEvent(
				WaitingEventId, 
				serviceName, 
				serviceTypeName, 
				replicaOrInstanceId, 
				partitionId, 
				applicationName, 
				applicationTypeName, 
				nodeName, 
				milliseconds);
		}

		[NonEvent]
		public void Waiting(
			System.Fabric.ServiceContext context, 
			int milliseconds)
		{
			if (this.IsEnabled())
			{
				Waiting(
					context.ServiceName.ToString(), 
					context.ServiceTypeName, 
					context.GetReplicaOrInstanceId(), 
					context.PartitionId, 
					context.CodePackageActivationContext.ApplicationName, 
					context.CodePackageActivationContext.ApplicationTypeName, 
					context.NodeContext.NodeName, 
					milliseconds);
			}
		}


	}
}