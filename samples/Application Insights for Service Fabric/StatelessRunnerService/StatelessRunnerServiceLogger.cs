/*******************************************************************************************
*  This class is autogenerated from the class StatelessRunnerServiceLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using StatelessRunnerService;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;


namespace StatelessRunnerService
{
	internal sealed class StatelessRunnerServiceLogger : IStatelessRunnerServiceLogger
	{
		private readonly System.Fabric.ServiceContext _context;
		private readonly Microsoft.ApplicationInsights.TelemetryClient _telemetryClient;

		public StatelessRunnerServiceLogger(
			System.Fabric.ServiceContext context)
		{
			_context = context;
			
            _telemetryClient = new Microsoft.ApplicationInsights.TelemetryClient();
            _telemetryClient.Context.User.Id = Environment.UserName;
            _telemetryClient.Context.Session.Id = Guid.NewGuid().ToString();
            _telemetryClient.Context.Device.OperatingSystem = Environment.OSVersion.ToString();

		}

		public void StartRunAsyncLoop(
			int iteration,
			System.Guid correlationId)
		{
			DefaultEventSource.Current.StartRunAsyncLoop(
				_context, 
				iteration, 
				correlationId
			);
            _runAsyncLoopOperationHolder = _telemetryClient.StartOperation<RequestTelemetry>("runAsyncLoop");
	       _runAsyncLoopOperationHolder.Telemetry.Properties.Add("ServiceName", _context.ServiceName.ToString());
			_runAsyncLoopOperationHolder.Telemetry.Properties.Add("ServiceTypeName", _context.ServiceTypeName);
			_runAsyncLoopOperationHolder.Telemetry.Properties.Add("ReplicaOrInstanceId", _context.GetReplicaOrInstanceId().ToString());
			_runAsyncLoopOperationHolder.Telemetry.Properties.Add("PartitionId", _context.PartitionId.ToString());
			_runAsyncLoopOperationHolder.Telemetry.Properties.Add("ApplicationName", _context.CodePackageActivationContext.ApplicationName);
			_runAsyncLoopOperationHolder.Telemetry.Properties.Add("ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName);
			_runAsyncLoopOperationHolder.Telemetry.Properties.Add("NodeName", _context.NodeContext.NodeName);
			_runAsyncLoopOperationHolder.Telemetry.Properties.Add("Iteration", iteration.ToString());
			_runAsyncLoopOperationHolder.Telemetry.Properties.Add("CorrelationId", correlationId.ToString());
    
		}

		private IOperationHolder<RequestTelemetry> _runAsyncLoopOperationHolder;


		public void StopRunAsyncLoop(
			)
		{
			DefaultEventSource.Current.StopRunAsyncLoop(
				_context
			);
            _telemetryClient.StopOperation(_runAsyncLoopOperationHolder);
	            _runAsyncLoopOperationHolder.Dispose();
    
		}



		public void RunAsyncWorkCompleted(
			int iteration)
		{
			DefaultEventSource.Current.RunAsyncWorkCompleted(
				_context, 
				iteration
			);
			_telemetryClient.TrackEvent(
	            nameof(RunAsyncWorkCompleted),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.GetReplicaOrInstanceId().ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"Iteration", iteration.ToString()}
	            });
    
		}



		public void Waiting(
			int milliseconds)
		{
			DefaultEventSource.Current.Waiting(
				_context, 
				milliseconds
			);
			_telemetryClient.TrackEvent(
	            nameof(Waiting),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ServiceName", _context.ServiceName.ToString()},
                    {"ServiceTypeName", _context.ServiceTypeName},
                    {"ReplicaOrInstanceId", _context.GetReplicaOrInstanceId().ToString()},
                    {"PartitionId", _context.PartitionId.ToString()},
                    {"ApplicationName", _context.CodePackageActivationContext.ApplicationName},
                    {"ApplicationTypeName", _context.CodePackageActivationContext.ApplicationTypeName},
                    {"NodeName", _context.NodeContext.NodeName},
                    {"Milliseconds", milliseconds.ToString()}
	            });
    
		}



	}
}
