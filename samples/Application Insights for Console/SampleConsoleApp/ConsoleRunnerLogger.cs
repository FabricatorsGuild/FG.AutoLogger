/*******************************************************************************************
*  This class is autogenerated from the class ConsoleRunnerLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using CodeEffect.Diagnostics.EventSourceGenerator.Samples;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;


namespace CodeEffect.Diagnostics.EventSourceGenerator.Samples
{
	internal sealed class ConsoleRunnerLogger : IConsoleRunnerLogger
	{
		private readonly int _processId;
		private readonly string _machineName;
		private readonly Microsoft.ServiceFabric.Actors.ActorId _actorId;
		private readonly Microsoft.ApplicationInsights.TelemetryClient _telemetryClient;

		public ConsoleRunnerLogger(
			int processId,
			string machineName,
			Microsoft.ServiceFabric.Actors.ActorId actorId)
		{
			_processId = processId;
			_machineName = machineName;
			_actorId = actorId;
			_telemetryClient.Context.User.Id = Environment.UserName;
            _telemetryClient.Context.Session.Id = Guid.NewGuid().ToString();
            _telemetryClient.Context.Device.OperatingSystem = Environment.OSVersion.ToString();

		}

		public void RunnerCreated(
			)
		{
			DefaultEventSource.Current.RunnerCreated(
				_processId, 
				_machineName, 
				_actorId
			);
			_telemetryClient.TrackEvent(
	            nameof(RunnerCreated),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ProcessId", _processId.ToString()},
                    {"MachineName", Environment.MachineName},
                    {"Actor", _actorId.ToString()}
	            });
    
		}



		public void RunnerDestroyed(
			)
		{
			DefaultEventSource.Current.RunnerDestroyed(
				_processId, 
				_machineName, 
				_actorId
			);
			_telemetryClient.TrackEvent(
	            nameof(RunnerDestroyed),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ProcessId", _processId.ToString()},
                    {"MachineName", Environment.MachineName},
                    {"Actor", _actorId.ToString()}
	            });
    
		}



		public void WaitingForKeyPress(
			)
		{
			DefaultEventSource.Current.WaitingForKeyPress(
				_processId, 
				_machineName, 
				_actorId
			);
			_telemetryClient.TrackEvent(
	            nameof(WaitingForKeyPress),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ProcessId", _processId.ToString()},
                    {"MachineName", Environment.MachineName},
                    {"Actor", _actorId.ToString()}
	            });
    
		}



		public void KeyPressed(
			System.ConsoleKey key)
		{
			DefaultEventSource.Current.KeyPressed(
				_processId, 
				_machineName, 
				_actorId, 
				key
			);
			_telemetryClient.TrackEvent(
	            nameof(KeyPressed),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ProcessId", _processId.ToString()},
                    {"MachineName", Environment.MachineName},
                    {"Actor", _actorId.ToString()},
                    {"Key", key.ToString()}
	            });
    
		}



		public void UnsupportedKeyError(
			System.Exception ex)
		{
			DefaultEventSource.Current.UnsupportedKeyError(
				_processId, 
				_machineName, 
				_actorId, 
				ex
			);
			_telemetryClient.TrackException(
	            ex,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "UnsupportedKeyError" },
	                {"ProcessId", _processId.ToString()},
                    {"MachineName", Environment.MachineName},
                    {"Actor", _actorId.ToString()},
                    {"Message", ex.Message},
                    {"Source", ex.Source},
                    {"ExceptionTypeName", ex.GetType().FullName},
                    {"Exception", ex.AsJson()}
	            });
    
		}



		public void StartLoop(
			)
		{
			DefaultEventSource.Current.StartLoop(
				_processId, 
				_machineName, 
				_actorId
			);
            _loopOperationHolder = _telemetryClient.StartOperation<RequestTelemetry>("loop");
	       _loopOperationHolder.Telemetry.Properties.Add("ProcessId", _processId.ToString());
			_loopOperationHolder.Telemetry.Properties.Add("MachineName", Environment.MachineName);
			_loopOperationHolder.Telemetry.Properties.Add("Actor", _actorId.ToString());
    
		}

		private IOperationHolder<RequestTelemetry> _loopOperationHolder;


		public void StopLoop(
			)
		{
			DefaultEventSource.Current.StopLoop(
				_processId, 
				_machineName, 
				_actorId
			);
            _telemetryClient.StopOperation(_loopOperationHolder);
	            _loopOperationHolder.Dispose();
    
		}



		public void RandomIntsGenerated(
			int[] values)
		{
			DefaultEventSource.Current.RandomIntsGenerated(
				_processId, 
				_machineName, 
				_actorId, 
				values
			);
			_telemetryClient.TrackEvent(
	            nameof(RandomIntsGenerated),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"ProcessId", _processId.ToString()},
                    {"MachineName", Environment.MachineName},
                    {"Actor", _actorId.ToString()},
                    {"Values", values.ToString()}
	            });
    
		}



	}
}
