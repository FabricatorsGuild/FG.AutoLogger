/*******************************************************************************************
*  This class is autogenerated from the class DependencyLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Collections.Generic;
using FG.Diagnostics.AutoLogger.Samples.ConsoleApplication1.Loggers;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;
using System.Runtime.Remoting.Messaging;


namespace Ce.Labs.Samples
{
	internal sealed class DependencyLogger : IDependencyLogger
	{
	    private sealed class ScopeWrapper : IDisposable
        {
            private readonly IEnumerable<IDisposable> _disposables;

            public ScopeWrapper(IEnumerable<IDisposable> disposables)
            {
                _disposables = disposables;
            }

            public void Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }

            private void Dispose(bool disposing)
            {
                if (disposing)
                {
                    foreach (var disposable in _disposables)
                    {
                        disposable.Dispose();
                    }
                }
            }
        }

	    private sealed class ScopeWrapperWithAction : IDisposable
        {
            private readonly Action _onStop;

            internal static IDisposable Wrap(Func<IDisposable> wrap)
            {
                return wrap();
            }

            public ScopeWrapperWithAction(Action onStop)
            {
                _onStop = onStop;
            }

            public void Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }

            private void Dispose(bool disposing)
            {
                if (disposing)
                {
                    _onStop?.Invoke();
                }
            }
        }


		private readonly bool _autogenerated;
		private readonly string _machineName;
		// Hello from extension
		private readonly Microsoft.ApplicationInsights.TelemetryClient _telemetryClient;

        public sealed class OperationHolder
        {
            public static void StartOperation(IOperationHolder<RequestTelemetry> aiOperationHolder)
            {
                OperationHolder.Current = new OperationHolder() {AIOperationHolder = aiOperationHolder};
            }

            public static IOperationHolder<RequestTelemetry> StopOperation()
            {
                var aiOperationHolder = OperationHolder.Current.AIOperationHolder;
                OperationHolder.Current = null;

                return aiOperationHolder;
            }

            private IOperationHolder<RequestTelemetry> AIOperationHolder { get; set; }

            private static readonly string ContextKey = Guid.NewGuid().ToString();

            public static OperationHolder Current
            {
                get { return (OperationHolder)CallContext.LogicalGetData(ContextKey); }
                internal set
                {
                    if (value == null)
                    {
                        CallContext.FreeNamedDataSlot(ContextKey);
                    }
                    else
                    {
                        CallContext.LogicalSetData(ContextKey, value);
                    }
                }
            }
        }

		public DependencyLogger(
			bool autogenerated,
			string machineName)
		{
			_autogenerated = autogenerated;
			_machineName = machineName;
			// Do stuff in the constructor
			
            _telemetryClient = new Microsoft.ApplicationInsights.TelemetryClient();
            _telemetryClient.Context.User.Id = Environment.UserName;
            _telemetryClient.Context.Session.Id = Guid.NewGuid().ToString();
            _telemetryClient.Context.Device.OperatingSystem = Environment.OSVersion.ToString();

		}


        public System.IDisposable CallExternalComponent(
			System.Uri requestName,
			string content)
		{
		    return new ScopeWrapper(new IDisposable[]
		    {

                ScopeWrapperWithAction.Wrap(() =>
		        {
			FGDiagnosticsAutoLoggerSamplesConsoleApplication1EventSource.Current.StartCallExternalComponent(
				_autogenerated, 
				_machineName, 
				requestName, 
				content
			);
    
		            return new ScopeWrapperWithAction(() =>
		            {
			FGDiagnosticsAutoLoggerSamplesConsoleApplication1EventSource.Current.StopCallExternalComponent(
				_autogenerated, 
				_machineName, 
				requestName, 
				content
			);
    
		            });
		        }),


                ScopeWrapperWithAction.Wrap(() =>
		        {

			System.Diagnostics.Debug.WriteLine($"[Dependency] ERR: StartCallExternalComponent");
           
			System.Diagnostics.Debug.WriteLine($"\t_autogenerated:\t{_autogenerated}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			System.Diagnostics.Debug.WriteLine($"\trequestName.ToString():\t{requestName.ToString()}");
			System.Diagnostics.Debug.WriteLine($"\tcontent:\t{content}");
    
		            return new ScopeWrapperWithAction(() =>
		            {

			System.Diagnostics.Debug.WriteLine($"[Dependency] ERR: StopCallExternalComponent");
           
			System.Diagnostics.Debug.WriteLine($"\t_autogenerated:\t{_autogenerated}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			System.Diagnostics.Debug.WriteLine($"\trequestName.ToString():\t{requestName.ToString()}");
			System.Diagnostics.Debug.WriteLine($"\tcontent:\t{content}");
    
		            });
		        }),


                ScopeWrapperWithAction.Wrap(() =>
		        {
			_callExternalComponentStopwatch.Restart();
    
		            return new ScopeWrapperWithAction(() =>
		            {
			_callExternalComponentStopwatch.Stop();
    
		            });
		        }),


                ScopeWrapperWithAction.Wrap(() =>
		        {

			            var callExternalComponentOperationHolder = _telemetryClient.StartOperation<DependencyTelemetry>(requestName.ToString() ?? "callExternalComponent");
			            callExternalComponentOperationHolder.Telemetry.Properties.Add("Autogenerated", _autogenerated.ToString());
			callExternalComponentOperationHolder.Telemetry.Properties.Add("MachineName", Environment.MachineName);
			callExternalComponentOperationHolder.Telemetry.Properties.Add("RequestName", requestName.ToString());
			callExternalComponentOperationHolder.Telemetry.Properties.Add("Content", content);
    
		            return new ScopeWrapperWithAction(() =>
		            {

			            _telemetryClient.StopOperation<DependencyTelemetry>(callExternalComponentOperationHolder);
    
		            });
		        }),


		    });
		}

		private System.Diagnostics.Stopwatch _callExternalComponentStopwatch = new System.Diagnostics.Stopwatch();







        public System.IDisposable RecieveMessage(
			string message)
		{
		    return new ScopeWrapper(new IDisposable[]
		    {

                ScopeWrapperWithAction.Wrap(() =>
		        {
			FGDiagnosticsAutoLoggerSamplesConsoleApplication1EventSource.Current.StartRecieveMessage(
				_autogenerated, 
				_machineName, 
				message
			);
    
		            return new ScopeWrapperWithAction(() =>
		            {
			FGDiagnosticsAutoLoggerSamplesConsoleApplication1EventSource.Current.StopRecieveMessage(
				_autogenerated, 
				_machineName, 
				message
			);
    
		            });
		        }),


                ScopeWrapperWithAction.Wrap(() =>
		        {

			System.Diagnostics.Debug.WriteLine($"[Dependency] ERR: StartRecieveMessage");
           
			System.Diagnostics.Debug.WriteLine($"\t_autogenerated:\t{_autogenerated}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			System.Diagnostics.Debug.WriteLine($"\tmessage:\t{message}");
    
		            return new ScopeWrapperWithAction(() =>
		            {

			System.Diagnostics.Debug.WriteLine($"[Dependency] ERR: StopRecieveMessage");
           
			System.Diagnostics.Debug.WriteLine($"\t_autogenerated:\t{_autogenerated}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			System.Diagnostics.Debug.WriteLine($"\tmessage:\t{message}");
    
		            });
		        }),


                ScopeWrapperWithAction.Wrap(() =>
		        {
			_recieveMessageStopwatch.Restart();
    
		            return new ScopeWrapperWithAction(() =>
		            {
			_recieveMessageStopwatch.Stop();
    
		            });
		        }),


                ScopeWrapperWithAction.Wrap(() =>
		        {

			            var recieveMessageOperationHolder = _telemetryClient.StartOperation<RequestTelemetry>("recieveMessage");
			            recieveMessageOperationHolder.Telemetry.Properties.Add("Autogenerated", _autogenerated.ToString());
			recieveMessageOperationHolder.Telemetry.Properties.Add("MachineName", Environment.MachineName);
			recieveMessageOperationHolder.Telemetry.Properties.Add("Message", message);
    
		            return new ScopeWrapperWithAction(() =>
		            {

			            _telemetryClient.StopOperation<RequestTelemetry>(recieveMessageOperationHolder);
    
		            });
		        }),


		    });
		}

		private System.Diagnostics.Stopwatch _recieveMessageStopwatch = new System.Diagnostics.Stopwatch();






	}
}
