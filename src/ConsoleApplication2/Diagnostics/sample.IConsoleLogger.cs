/*******************************************************************************************
*  This class is autogenerated from the class ConsoleLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Threading.Tasks;

namespace ConsoleApplication1.Diagnostics
{
	internal sealed partial class Sample
	{

		private const int SayHelloEventId = 3001;

		[Event(SayHelloEventId, Level = EventLevel.LogAlways, Message = "{0}", Keywords = Keywords.Console)]
		public void SayHello(
			string message)
		{
			WriteEvent(
				SayHelloEventId, 
				message);
		}


		private const int MessageEventId = 6002;

		[Event(MessageEventId, Level = EventLevel.LogAlways, Message = "{0}", Keywords = Keywords.Console)]
		public void Message(
			string message)
		{
			WriteEvent(
				MessageEventId, 
				message);
		}


		private const int ErrorEventId = 9003;

		[Event(ErrorEventId, Level = EventLevel.LogAlways, Message = "{0}", Keywords = Keywords.Console | Keywords.Error)]
		private void Error(
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				ErrorEventId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void Error(
			System.Exception exception)
		{
			if (this.IsEnabled())
			{
				Error(
					exception.Message, 
					exception.Source, 
					exception.GetType().FullName, 
					exception.AsJson());
			}
		}


		private const int SayGoodbyeEventId = 12004;

		[Event(SayGoodbyeEventId, Level = EventLevel.LogAlways, Message = "Say Goodbye {0} {1}", Keywords = Keywords.Console)]
		private void SayGoodbye(
			string goodbye, 
			string nightTime)
		{
			WriteEvent(
				SayGoodbyeEventId, 
				goodbye, 
				nightTime);
		}

		[NonEvent]
		public void SayGoodbye(
			string goodbye, 
			System.DateTime nightTime)
		{
			if (this.IsEnabled())
			{
				SayGoodbye(
					goodbye, 
					nightTime.ToString());
			}
		}


		private const int SpeciallyEventId = 15005;

		[Event(SpeciallyEventId, Level = EventLevel.LogAlways, Message = "Specially {0}", Keywords = Keywords.Console)]
		private void Specially(
			string special)
		{
			WriteEvent(
				SpeciallyEventId, 
				special);
		}

		[NonEvent]
		public void Specially(
			ConsoleApplication1.Loggers.Special special)
		{
			if (this.IsEnabled())
			{
				Specially(
					special.ToString());
			}
		}


		private const int StartHelloEventId = 18006;

		[Event(StartHelloEventId, Level = EventLevel.LogAlways, Message = "Start Hello", Keywords = Keywords.Console, Opcode = EventOpcode.Start)]
		public void StartHello(
			)
		{
			WriteEvent(
				StartHelloEventId);
		}


		private const int StopHelloEventId = 21007;

		[Event(StopHelloEventId, Level = EventLevel.LogAlways, Message = "Stop Hello", Keywords = Keywords.Console, Opcode = EventOpcode.Stop)]
		public void StopHello(
			)
		{
			WriteEvent(
				StopHelloEventId);
		}


	}
}