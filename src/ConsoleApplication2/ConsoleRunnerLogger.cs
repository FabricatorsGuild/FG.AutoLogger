/*******************************************************************************************
*  This class is autogenerated from the class ConsoleRunnerLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Collections.Generic;
using FG.Diagnostics.AutoLogger.Samples.ConsoleApplication1.Loggers;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;
using System.Runtime.Remoting.Messaging;


namespace Ce.Labs.Samples
{
	internal sealed class ConsoleRunnerLogger : IConsoleRunnerLogger
	{
	    private sealed class ScopeWrapper : IDisposable
        {
            private readonly IEnumerable<IDisposable> _disposables;

            public ScopeWrapper(IEnumerable<IDisposable> disposables)
            {
                _disposables = disposables;
            }

            public void Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }

            private void Dispose(bool disposing)
            {
                if (disposing)
                {
                    foreach (var disposable in _disposables)
                    {
                        disposable.Dispose();
                    }
                }
            }
        }

	    private sealed class ScopeWrapperWithAction : IDisposable
        {
            private readonly Action _onStop;

            internal static IDisposable Wrap(Func<IDisposable> wrap)
            {
                return wrap();
            }

            public ScopeWrapperWithAction(Action onStop)
            {
                _onStop = onStop;
            }

            public void Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }

            private void Dispose(bool disposing)
            {
                if (disposing)
                {
                    _onStop?.Invoke();
                }
            }
        }


		private readonly bool _autogenerated;
		private readonly string _machineName;
		// Hello from extension
		private readonly Microsoft.ApplicationInsights.TelemetryClient _telemetryClient;

        public sealed class OperationHolder
        {
            public static void StartOperation(IOperationHolder<RequestTelemetry> aiOperationHolder)
            {
                OperationHolder.Current = new OperationHolder() {AIOperationHolder = aiOperationHolder};
            }

            public static IOperationHolder<RequestTelemetry> StopOperation()
            {
                var aiOperationHolder = OperationHolder.Current.AIOperationHolder;
                OperationHolder.Current = null;

                return aiOperationHolder;
            }

            private IOperationHolder<RequestTelemetry> AIOperationHolder { get; set; }

            private static readonly string ContextKey = Guid.NewGuid().ToString();

            public static OperationHolder Current
            {
                get { return (OperationHolder)CallContext.LogicalGetData(ContextKey); }
                internal set
                {
                    if (value == null)
                    {
                        CallContext.FreeNamedDataSlot(ContextKey);
                    }
                    else
                    {
                        CallContext.LogicalSetData(ContextKey, value);
                    }
                }
            }
        }

		public ConsoleRunnerLogger(
			bool autogenerated,
			string machineName)
		{
			_autogenerated = autogenerated;
			_machineName = machineName;
			// Do stuff in the constructor
			
            _telemetryClient = new Microsoft.ApplicationInsights.TelemetryClient();
            _telemetryClient.Context.User.Id = Environment.UserName;
            _telemetryClient.Context.Session.Id = Guid.NewGuid().ToString();
            _telemetryClient.Context.Device.OperatingSystem = Environment.OSVersion.ToString();

		}

		public void RunnerCreated(
			)
		{
			FGDiagnosticsAutoLoggerSamplesConsoleApplication1EventSource.Current.RunnerCreated(
				_autogenerated, 
				_machineName
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner] ERR: RunnerCreated");
           
			System.Diagnostics.Debug.WriteLine($"\t_autogenerated:\t{_autogenerated}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			_telemetryClient.TrackEvent(
	            nameof(RunnerCreated),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"Autogenerated", _autogenerated.ToString()},
                    {"MachineName", Environment.MachineName}
	            });
    
		}




		public void RunnerDestroyed(
			)
		{
			FGDiagnosticsAutoLoggerSamplesConsoleApplication1EventSource.Current.RunnerDestroyed(
				_autogenerated, 
				_machineName
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner] ERR: RunnerDestroyed");
           
			System.Diagnostics.Debug.WriteLine($"\t_autogenerated:\t{_autogenerated}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			_telemetryClient.TrackEvent(
	            nameof(RunnerDestroyed),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"Autogenerated", _autogenerated.ToString()},
                    {"MachineName", Environment.MachineName}
	            });
    
		}




		public void WaitingForKeyPress(
			)
		{
			FGDiagnosticsAutoLoggerSamplesConsoleApplication1EventSource.Current.WaitingForKeyPress(
				_autogenerated, 
				_machineName
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner] ERR: WaitingForKeyPress");
           
			System.Diagnostics.Debug.WriteLine($"\t_autogenerated:\t{_autogenerated}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			_telemetryClient.TrackEvent(
	            nameof(WaitingForKeyPress),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"Autogenerated", _autogenerated.ToString()},
                    {"MachineName", Environment.MachineName}
	            });
    
		}




		public void KeyPressed(
			System.ConsoleKey key)
		{
			FGDiagnosticsAutoLoggerSamplesConsoleApplication1EventSource.Current.KeyPressed(
				_autogenerated, 
				_machineName, 
				key
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner] ERR: KeyPressed");
           
			System.Diagnostics.Debug.WriteLine($"\t_autogenerated:\t{_autogenerated}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			System.Diagnostics.Debug.WriteLine($"\tkey.ToString():\t{key.ToString()}");
			_telemetryClient.TrackEvent(
	            nameof(KeyPressed),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"Autogenerated", _autogenerated.ToString()},
                    {"MachineName", Environment.MachineName},
                    {"Key", key.ToString()}
	            });
    
		}




		public void UnsupportedKeyError(
			System.Exception ex)
		{
			FGDiagnosticsAutoLoggerSamplesConsoleApplication1EventSource.Current.UnsupportedKeyError(
				_autogenerated, 
				_machineName, 
				ex
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner, Error] ERR: UnsupportedKeyError");
           
			System.Diagnostics.Debug.WriteLine($"\t_autogenerated:\t{_autogenerated}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			System.Diagnostics.Debug.WriteLine($"\tex.Message:\t{ex.Message}");
			System.Diagnostics.Debug.WriteLine($"\tex.Source:\t{ex.Source}");
			System.Diagnostics.Debug.WriteLine($"\tex.GetType().FullName:\t{ex.GetType().FullName}");
			System.Diagnostics.Debug.WriteLine($"\tex.AsJson():\t{ex.AsJson()}");
			_telemetryClient.TrackException(
	            ex,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "UnsupportedKeyError" },
	                {"Autogenerated", _autogenerated.ToString()},
                    {"MachineName", Environment.MachineName},
                    {"Message", ex.Message},
                    {"Source", ex.Source},
                    {"ExceptionTypeName", ex.GetType().FullName},
                    {"Exception", ex.AsJson()}
	            });
    
		}




		public void StartLoop(
			)
		{
			FGDiagnosticsAutoLoggerSamplesConsoleApplication1EventSource.Current.StartLoop(
				_autogenerated, 
				_machineName
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner] ERR: StartLoop");
           
			System.Diagnostics.Debug.WriteLine($"\t_autogenerated:\t{_autogenerated}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			_loopStopwatch.Restart();

			var loopOperationHolder = _telemetryClient.StartOperation<RequestTelemetry>("loop");
	       loopOperationHolder.Telemetry.Properties.Add("Autogenerated", _autogenerated.ToString());
			loopOperationHolder.Telemetry.Properties.Add("MachineName", Environment.MachineName);
	       OperationHolder.StartOperation(loopOperationHolder);
    
		}

		private System.Diagnostics.Stopwatch _loopStopwatch = new System.Diagnostics.Stopwatch();



		public void StopLoop(
			)
		{
			FGDiagnosticsAutoLoggerSamplesConsoleApplication1EventSource.Current.StopLoop(
				_autogenerated, 
				_machineName
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner] ERR: StopLoop");
           
			System.Diagnostics.Debug.WriteLine($"\t_autogenerated:\t{_autogenerated}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			_loopStopwatch.Stop();

			var loopOperationHolder = OperationHolder.StopOperation();
			_telemetryClient.StopOperation(loopOperationHolder);
			loopOperationHolder.Dispose();
    
		}




		public void RandomIntsGenerated(
			int[] values)
		{
			FGDiagnosticsAutoLoggerSamplesConsoleApplication1EventSource.Current.RandomIntsGenerated(
				_autogenerated, 
				_machineName, 
				values
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner] ERR: RandomIntsGenerated");
           
			System.Diagnostics.Debug.WriteLine($"\t_autogenerated:\t{_autogenerated}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			System.Diagnostics.Debug.WriteLine($"\tvalues.ToString():\t{values.ToString()}");
			_telemetryClient.TrackEvent(
	            nameof(RandomIntsGenerated),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"Autogenerated", _autogenerated.ToString()},
                    {"MachineName", Environment.MachineName},
                    {"Values", values.ToString()}
	            });
    
		}




	}
}
