/*******************************************************************************************
*  This class is autogenerated from the class sample.eventsource
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Fabric;
using System.Threading.Tasks;

namespace CodeEffect.Diagnostics.EventSourceGenerator
{
	[EventSource(Name = "CE-CodeEffect.Diagnostics.EventSourceGenerator")]
	internal sealed partial class sample : EventSource
	{
		public static readonly sample Current = new sample();

		static sample()
		{
			// A workaround for the problem where ETW activities do not 
			// get tracked until Tasks infrastructure is initialized.
			// This problem will be fixed in .NET Framework 4.6.2.
			Task.Run(() => { });
		}

		// Instance constructor is private to enforce singleton semantics
		private sample() : base() { }

		#region Keywords
		// Event keywords can be used to categorize events. 
		// Each keyword is a bit flag. A single event can be 
		// associated with multiple keywords (via EventAttribute.Keywords property).
		// Keywords must be defined as a public class named 'Keywords' 
		// inside EventSource that uses them.
		public static class Keywords
		{
			public const EventKeywords HostInitialization = (EventKeywords)0x1L;
			public const EventKeywords Domain = (EventKeywords)0x2L;
			public const EventKeywords Infrastructure = (EventKeywords)0x4L;

		}
        #endregion

        #region Events

	    #region IMyLogger

	    

	    #endregion IMyLogger

        private const int MessageEventId = 100;

		[Event(MessageEventId, Level = EventLevel.Informational, Message = "{0}")]
		private void Message(
			string message)
		{
			WriteEvent(
				MessageEventId,
				message);
		}

        
		private const int SpecialMessageEventId = 101;

		[Event(SpecialMessageEventId, Level = EventLevel.Informational, Message = "{1}")]
		private void SpecialMessage(
			string message, 
			int specialValue)
		{
			WriteEvent(
				SpecialMessageEventId,
				message, 
				specialValue);
		}

        
		private const int ErrorEventId = 300;

		[Event(ErrorEventId, Level = EventLevel.Error, Message = "{0}", Keywords = Keywords.Domain | Keywords.Infrastructure)]
		private void Error(
			string exception)
		{
			WriteEvent(
				ErrorEventId,
				exception);
		}

        
		[NonEvent]
		public void ActorMessage(
			Microsoft.ServiceFabric.Actors.Runtime.Actor actor, 
			string message)
		{
			if (this.IsEnabled())
			{
				ActorMessage(
					actor.GetType().ToString(), 
					actor.Id.ToString(), 
					actor.ActorService.Context.CodePackageActivationContext.ApplicationTypeName, 
					actor.ActorService.Context.CodePackageActivationContext.ApplicationName, 
					actor.ActorService.Context.ServiceTypeName, 
					actor.ActorService.Context.ServiceName.ToString(), 
					actor.ActorService.Context.PartitionId, 
					actor.ActorService.Context.ReplicaId, 
					actor.ActorService.Context.NodeContext.NodeName, 
					message);
			}
		}

		private const int ActorMessageEventId = 400;

		[Event(ActorMessageEventId, Level = EventLevel.Informational, Message = "{1}")]
		private void ActorMessage(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string message)
		{
			WriteEvent(
				ActorMessageEventId,
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				message);
		}

        
		[NonEvent]
		public void ActorError(
			Microsoft.ServiceFabric.Actors.Runtime.Actor actor, 
			System.Exception exception)
		{
			if (this.IsEnabled())
			{
				ActorError(
					actor.GetType().ToString(), 
					actor.Id.ToString(), 
					actor.ActorService.Context.CodePackageActivationContext.ApplicationTypeName, 
					actor.ActorService.Context.CodePackageActivationContext.ApplicationName, 
					actor.ActorService.Context.ServiceTypeName, 
					actor.ActorService.Context.ServiceName.ToString(), 
					actor.ActorService.Context.PartitionId, 
					actor.ActorService.Context.ReplicaId, 
					actor.ActorService.Context.NodeContext.NodeName, 
					exception.Message, 
					exception.Source, 
					exception.GetType().FullName, 
					exception.AsJson());
			}
		}

		private const int ActorErrorEventId = 401;

		[Event(ActorErrorEventId, Level = EventLevel.Warning, Message = "{1}")]
		private void ActorError(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				ActorErrorEventId,
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

        
		[NonEvent]
		public void SomeDomainEventWithActor(
			Microsoft.ServiceFabric.Actors.Runtime.Actor actor, 
			string message, 
			int value)
		{
			if (this.IsEnabled())
			{
				SomeDomainEventWithActor(
					actor.GetType().ToString(), 
					actor.Id.ToString(), 
					actor.ActorService.Context.CodePackageActivationContext.ApplicationTypeName, 
					actor.ActorService.Context.CodePackageActivationContext.ApplicationName, 
					actor.ActorService.Context.ServiceTypeName, 
					actor.ActorService.Context.ServiceName.ToString(), 
					actor.ActorService.Context.PartitionId, 
					actor.ActorService.Context.ReplicaId, 
					actor.ActorService.Context.NodeContext.NodeName, 
					message, 
					value);
			}
		}

		private const int SomeDomainEventWithActorEventId = 402;

		[Event(SomeDomainEventWithActorEventId, Level = EventLevel.Informational, Message = "{2}")]
		private void SomeDomainEventWithActor(
			string actorType, 
			string actorId, 
			string applicationTypeName, 
			string applicationName, 
			string serviceTypeName, 
			string serviceName, 
			Guid partitionId, 
			long replicaOrInstanceId, 
			string nodeName, 
			string message, 
			int value)
		{
			WriteEvent(
				SomeDomainEventWithActorEventId,
				actorType, 
				actorId, 
				applicationTypeName, 
				applicationName, 
				serviceTypeName, 
				serviceName, 
				partitionId, 
				replicaOrInstanceId, 
				nodeName, 
				message, 
				value);
		}


		#endregion

	}


	internal static class Helpers
	{
		public static string AsJson(this System.Exception that)
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(that);
		}
	}


}