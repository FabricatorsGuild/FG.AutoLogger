/*******************************************************************************************
*  This class is autogenerated from the class ConsoleLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Collections.Generic;
using ConsoleApplication1.Loggers;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;
using System.Runtime.Remoting.Messaging;


namespace ConsoleApplication1
{
	internal sealed class ConsoleLogger : IConsoleLogger
	{
	    private sealed class ScopeWrapper : IDisposable
        {
            private readonly IEnumerable<IDisposable> _disposables;

            public ScopeWrapper(IEnumerable<IDisposable> disposables)
            {
                _disposables = disposables;
            }

            public void Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }

            private void Dispose(bool disposing)
            {
                if (disposing)
                {
                    foreach (var disposable in _disposables)
                    {
                        disposable.Dispose();
                    }
                }
            }
        }

	    private sealed class ScopeWrapperWithAction : IDisposable
        {
            private readonly Action _onStop;

            internal static IDisposable Wrap(Func<IDisposable> wrap)
            {
                return wrap();
            }

            public ScopeWrapperWithAction(Action onStop)
            {
                _onStop = onStop;
            }

            public void Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }

            private void Dispose(bool disposing)
            {
                if (disposing)
                {
                    _onStop?.Invoke();
                }
            }
        }


		private readonly bool _autogenerated;
		private readonly string _machineName;
		private readonly Microsoft.ApplicationInsights.TelemetryClient _telemetryClient;

        public sealed class OperationHolder
        {
            public static void StartOperation(IOperationHolder<RequestTelemetry> aiOperationHolder)
            {
                OperationHolder.Current = new OperationHolder() {AIOperationHolder = aiOperationHolder};
            }

            public static IOperationHolder<RequestTelemetry> StopOperation()
            {
                var aiOperationHolder = OperationHolder.Current.AIOperationHolder;
                OperationHolder.Current = null;

                return aiOperationHolder;
            }

            private IOperationHolder<RequestTelemetry> AIOperationHolder { get; set; }

            private static readonly string ContextKey = Guid.NewGuid().ToString();

            public static OperationHolder Current
            {
                get { return (OperationHolder)CallContext.LogicalGetData(ContextKey); }
                internal set
                {
                    if (value == null)
                    {
                        CallContext.FreeNamedDataSlot(ContextKey);
                    }
                    else
                    {
                        CallContext.LogicalSetData(ContextKey, value);
                    }
                }
            }
        }

		public ConsoleLogger(
			bool autogenerated,
			string machineName)
		{
			_autogenerated = autogenerated;
			_machineName = machineName;
			
            _telemetryClient = new Microsoft.ApplicationInsights.TelemetryClient();
            _telemetryClient.Context.User.Id = Environment.UserName;
            _telemetryClient.Context.Session.Id = Guid.NewGuid().ToString();
            _telemetryClient.Context.Device.OperatingSystem = Environment.OSVersion.ToString();

		}

		public void SayHello(
			string message)
		{
			ConsoleApplication1EventSource.Current.SayHello(
				_autogenerated, 
				_machineName, 
				message
			);
			_telemetryClient.TrackEvent(
	            nameof(SayHello),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"Autogenerated", _autogenerated.ToString()},
                    {"MachineName", Environment.MachineName},
                    {"Message", message}
	            });
    
		}



		public void Message(
			string message)
		{
			ConsoleApplication1EventSource.Current.Message(
				_autogenerated, 
				_machineName, 
				message
			);
			_telemetryClient.TrackEvent(
	            nameof(Message),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"Autogenerated", _autogenerated.ToString()},
                    {"MachineName", Environment.MachineName},
                    {"Message", message}
	            });
    
		}



		public void Error(
			System.Exception exception)
		{
			ConsoleApplication1EventSource.Current.Error(
				_autogenerated, 
				_machineName, 
				exception
			);
			_telemetryClient.TrackException(
	            exception,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "Error" },
	                {"Autogenerated", _autogenerated.ToString()},
                    {"MachineName", Environment.MachineName},
                    {"Message", exception.Message},
                    {"Source", exception.Source},
                    {"ExceptionTypeName", exception.GetType().FullName},
                    {"Exception", exception.AsJson()}
	            });
    
		}



		public void SayGoodbye(
			string goodbye,
			System.DateTime nightTime)
		{
			ConsoleApplication1EventSource.Current.SayGoodbye(
				_autogenerated, 
				_machineName, 
				goodbye, 
				nightTime
			);
			_telemetryClient.TrackEvent(
	            nameof(SayGoodbye),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"Autogenerated", _autogenerated.ToString()},
                    {"MachineName", Environment.MachineName},
                    {"Goodbye", goodbye},
                    {"NightTime", nightTime.ToString()}
	            });
    
		}



		public void Specially(
			ConsoleApplication1.Loggers.Special special)
		{
			ConsoleApplication1EventSource.Current.Specially(
				_autogenerated, 
				_machineName, 
				special
			);
			_telemetryClient.TrackEvent(
	            nameof(Specially),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"Autogenerated", _autogenerated.ToString()},
                    {"MachineName", Environment.MachineName},
                    {"Special", special.ToString()}
	            });
    
		}



		public void StartHello(
			)
		{
			ConsoleApplication1EventSource.Current.StartHello(
				_autogenerated, 
				_machineName
			);

			var helloOperationHolder = _telemetryClient.StartOperation<RequestTelemetry>("hello");
	       helloOperationHolder.Telemetry.Properties.Add("Autogenerated", _autogenerated.ToString());
			helloOperationHolder.Telemetry.Properties.Add("MachineName", Environment.MachineName);
	       OperationHolder.StartOperation(helloOperationHolder);
    
		}



		public void StopHello(
			)
		{
			ConsoleApplication1EventSource.Current.StopHello(
				_autogenerated, 
				_machineName
			);

			var helloOperationHolder = OperationHolder.StopOperation();
			_telemetryClient.StopOperation(helloOperationHolder);
			helloOperationHolder.Dispose();
    
		}



	}
}
