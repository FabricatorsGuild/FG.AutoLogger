/*******************************************************************************************
*  This class is autogenerated from the class ConsoleLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Threading.Tasks;

namespace ConsoleApplication1.Diagnostics
{
	internal sealed partial class sample
	{

		private const int SayHelloEventId = 1001;

		[Event(SayHelloEventId, Level = EventLevel.LogAlways, Message = "{2}")]
		public void SayHello(
			int processId, 
			string message)
		{
			WriteEvent(
				SayHelloEventId,
				processId, 
				message);
		}


		private const int MessageEventId = 1002;

		[Event(MessageEventId, Level = EventLevel.LogAlways, Message = "{2}")]
		public void Message(
			int processId, 
			string message)
		{
			WriteEvent(
				MessageEventId,
				processId, 
				message);
		}


		private const int ErrorEventId = 1003;

		[Event(ErrorEventId, Level = EventLevel.LogAlways, Message = "{2}")]
		private void Error(
			int processId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				ErrorEventId,
				processId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void Error(
			int processId, 
			System.Exception exception)
		{
			if (this.IsEnabled())
			{
				Error(
					processId, 
					exception.Message, 
					exception.Source, 
					exception.GetType().FullName, 
					exception.AsJson());
			}
		}


		private const int SayGoodbyeEventId = 1004;

		[Event(SayGoodbyeEventId, Level = EventLevel.LogAlways, Message = "Say Goodbye {2} {3}")]
		public void SayGoodbye(
			int processId, 
			string goodbye, 
			DateTime nightTime)
		{
			WriteEvent(
				SayGoodbyeEventId,
				processId, 
				goodbye, 
				nightTime);
		}


		private const int SpecialEventId = 1005;

		[Event(SpecialEventId, Level = EventLevel.LogAlways, Message = "Special {2}")]
		private void Special(
			int processId, 
			string special)
		{
			WriteEvent(
				SpecialEventId,
				processId, 
				special);
		}

		[NonEvent]
		public void Special(
			int processId, 
			string special)
		{
			if (this.IsEnabled())
			{
				Special(
					processId, 
					special.ToString());
			}
		}


	}
}