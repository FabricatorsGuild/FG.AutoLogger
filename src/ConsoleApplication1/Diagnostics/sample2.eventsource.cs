/*******************************************************************************************
*  This class is autogenerated from the class ConsoleRunnerLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Threading.Tasks;

namespace ConsoleApplication1.Diagnostics
{
	internal sealed partial class Sample
	{

		private const int RunnerCreatedEventId = 2001;

		[Event(RunnerCreatedEventId, Level = EventLevel.LogAlways, Message = "Runner Created", Keywords = Keywords.ConsoleRunner)]
		private void RunnerCreated(
			int processId, 
			string machineName, 
			string actorId, 
			string actorIdType)
		{
			WriteEvent(
				RunnerCreatedEventId, 
				processId, 
				machineName, 
				actorId, 
				actorIdType);
		}

		[NonEvent]
		public void RunnerCreated(
			int processId, 
			string machineName, 
			Microsoft.ServiceFabric.Actors.ActorId actorId)
		{
			if (this.IsEnabled())
			{
				RunnerCreated(
					processId, 
					Environment.MachineName, 
					actorId.ToString(), 
					actorId.Kind.ToString());
			}
		}


		private const int RunnerDestroyedEventId = 4002;

		[Event(RunnerDestroyedEventId, Level = EventLevel.LogAlways, Message = "Runner Destroyed", Keywords = Keywords.ConsoleRunner)]
		private void RunnerDestroyed(
			int processId, 
			string machineName, 
			string actorId, 
			string actorIdType)
		{
			WriteEvent(
				RunnerDestroyedEventId, 
				processId, 
				machineName, 
				actorId, 
				actorIdType);
		}

		[NonEvent]
		public void RunnerDestroyed(
			int processId, 
			string machineName, 
			Microsoft.ServiceFabric.Actors.ActorId actorId)
		{
			if (this.IsEnabled())
			{
				RunnerDestroyed(
					processId, 
					Environment.MachineName, 
					actorId.ToString(), 
					actorId.Kind.ToString());
			}
		}


		private const int WaitingForKeyPressEventId = 6003;

		[Event(WaitingForKeyPressEventId, Level = EventLevel.LogAlways, Message = "Waiting For Key Press", Keywords = Keywords.ConsoleRunner)]
		private void WaitingForKeyPress(
			int processId, 
			string machineName, 
			string actorId, 
			string actorIdType)
		{
			WriteEvent(
				WaitingForKeyPressEventId, 
				processId, 
				machineName, 
				actorId, 
				actorIdType);
		}

		[NonEvent]
		public void WaitingForKeyPress(
			int processId, 
			string machineName, 
			Microsoft.ServiceFabric.Actors.ActorId actorId)
		{
			if (this.IsEnabled())
			{
				WaitingForKeyPress(
					processId, 
					Environment.MachineName, 
					actorId.ToString(), 
					actorId.Kind.ToString());
			}
		}


		private const int KeyPressedEventId = 8004;

		[Event(KeyPressedEventId, Level = EventLevel.LogAlways, Message = "Key Pressed {4}", Keywords = Keywords.ConsoleRunner)]
		private void KeyPressed(
			int processId, 
			string machineName, 
			string actorId, 
			string actorIdType, 
			string key)
		{
			WriteEvent(
				KeyPressedEventId, 
				processId, 
				machineName, 
				actorId, 
				actorIdType, 
				key);
		}

		[NonEvent]
		public void KeyPressed(
			int processId, 
			string machineName, 
			Microsoft.ServiceFabric.Actors.ActorId actorId, 
			System.ConsoleKey key)
		{
			if (this.IsEnabled())
			{
				KeyPressed(
					processId, 
					Environment.MachineName, 
					actorId.ToString(), 
					actorId.Kind.ToString(), 
					key.ToString());
			}
		}


		private const int UnsupportedKeyErrorEventId = 10005;

		[Event(UnsupportedKeyErrorEventId, Level = EventLevel.LogAlways, Message = "{4}", Keywords = Keywords.ConsoleRunner | Keywords.Error)]
		private void UnsupportedKeyError(
			int processId, 
			string machineName, 
			string actorId, 
			string actorIdType, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				UnsupportedKeyErrorEventId, 
				processId, 
				machineName, 
				actorId, 
				actorIdType, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void UnsupportedKeyError(
			int processId, 
			string machineName, 
			Microsoft.ServiceFabric.Actors.ActorId actorId, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				UnsupportedKeyError(
					processId, 
					Environment.MachineName, 
					actorId.ToString(), 
					actorId.Kind.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int StartLoopEventId = 12006;

		[Event(StartLoopEventId, Level = EventLevel.LogAlways, Message = "Start Loop", Keywords = Keywords.ConsoleRunner, Opcode = EventOpcode.Start)]
		private void StartLoop(
			int processId, 
			string machineName, 
			string actorId, 
			string actorIdType)
		{
			WriteEvent(
				StartLoopEventId, 
				processId, 
				machineName, 
				actorId, 
				actorIdType);
		}

		[NonEvent]
		public void StartLoop(
			int processId, 
			string machineName, 
			Microsoft.ServiceFabric.Actors.ActorId actorId)
		{
			if (this.IsEnabled())
			{
				StartLoop(
					processId, 
					Environment.MachineName, 
					actorId.ToString(), 
					actorId.Kind.ToString());
			}
		}


		private const int StopLoopEventId = 14007;

		[Event(StopLoopEventId, Level = EventLevel.LogAlways, Message = "Stop Loop", Keywords = Keywords.ConsoleRunner, Opcode = EventOpcode.Stop)]
		private void StopLoop(
			int processId, 
			string machineName, 
			string actorId, 
			string actorIdType)
		{
			WriteEvent(
				StopLoopEventId, 
				processId, 
				machineName, 
				actorId, 
				actorIdType);
		}

		[NonEvent]
		public void StopLoop(
			int processId, 
			string machineName, 
			Microsoft.ServiceFabric.Actors.ActorId actorId)
		{
			if (this.IsEnabled())
			{
				StopLoop(
					processId, 
					Environment.MachineName, 
					actorId.ToString(), 
					actorId.Kind.ToString());
			}
		}


		private const int RandomIntsGeneratedEventId = 16008;

		[Event(RandomIntsGeneratedEventId, Level = EventLevel.LogAlways, Message = "Random Ints Generated {4}", Keywords = Keywords.ConsoleRunner)]
		private void RandomIntsGenerated(
			int processId, 
			string machineName, 
			string actorId, 
			string actorIdType, 
			string values)
		{
			WriteEvent(
				RandomIntsGeneratedEventId, 
				processId, 
				machineName, 
				actorId, 
				actorIdType, 
				values);
		}

		[NonEvent]
		public void RandomIntsGenerated(
			int processId, 
			string machineName, 
			Microsoft.ServiceFabric.Actors.ActorId actorId, 
			int[] values)
		{
			if (this.IsEnabled())
			{
				RandomIntsGenerated(
					processId, 
					Environment.MachineName, 
					actorId.ToString(), 
					actorId.Kind.ToString(), 
					values.ToString());
			}
		}


	}
}