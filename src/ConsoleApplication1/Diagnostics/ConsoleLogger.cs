/*******************************************************************************************
*  This class is autogenerated from the class ConsoleLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using ConsoleApplication1.Loggers;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;
using CodeEffect.Diagnostics.EventSourceGenerator.AI;


namespace ConsoleApplication1.Diagnostics
{
	internal sealed class ConsoleLogger : IConsoleLogger
	{
		// Hello from extension
		private readonly Microsoft.ApplicationInsights.TelemetryClient _telemetryClient;

		public ConsoleLogger(
			)
		{
			// Do stuff in the constructor
			
            _telemetryClient = new Microsoft.ApplicationInsights.TelemetryClient();
            _telemetryClient.Context.User.Id = Environment.UserName;
            _telemetryClient.Context.Session.Id = Guid.NewGuid().ToString();
            _telemetryClient.Context.Device.OperatingSystem = Environment.OSVersion.ToString();

		}

		public void SayHello(
			string message)
		{
			Sample.Current.SayHello(
				message
			);

			System.Diagnostics.Debug.WriteLine($"[Console] ERR: SayHello");
           
			System.Diagnostics.Debug.WriteLine($"\tmessage:\t{message}");
			_telemetryClient.TrackEvent(
	            nameof(SayHello),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"Message", message}
	            });
    
		}




		public void Message(
			string message)
		{
			Sample.Current.Message(
				message
			);

			System.Diagnostics.Debug.WriteLine($"[Console] ERR: Message");
           
			System.Diagnostics.Debug.WriteLine($"\tmessage:\t{message}");
			_telemetryClient.TrackEvent(
	            nameof(Message),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"Message", message}
	            });
    
		}




		public void Error(
			System.Exception exception)
		{
			Sample.Current.Error(
				exception
			);

			System.Diagnostics.Debug.WriteLine($"[Console, Error] ERR: Error");
           
			System.Diagnostics.Debug.WriteLine($"\texception.Message:\t{exception.Message}");
			System.Diagnostics.Debug.WriteLine($"\texception.Source:\t{exception.Source}");
			System.Diagnostics.Debug.WriteLine($"\texception.GetType().FullName:\t{exception.GetType().FullName}");
			System.Diagnostics.Debug.WriteLine($"\texception.AsJson():\t{exception.AsJson()}");
			_telemetryClient.TrackException(
	            exception,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "Error" },
	                {"Message", exception.Message},
                    {"Source", exception.Source},
                    {"ExceptionTypeName", exception.GetType().FullName},
                    {"Exception", exception.AsJson()}
	            });
    
		}




		public void SayGoodbye(
			string goodbye,
			System.DateTime nightTime)
		{
			Sample.Current.SayGoodbye(
				goodbye, 
				nightTime
			);

			System.Diagnostics.Debug.WriteLine($"[Console] ERR: SayGoodbye");
           
			System.Diagnostics.Debug.WriteLine($"\tgoodbye:\t{goodbye}");
			System.Diagnostics.Debug.WriteLine($"\tnightTime.ToString():\t{nightTime.ToString()}");
			_telemetryClient.TrackEvent(
	            nameof(SayGoodbye),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"Goodbye", goodbye},
                    {"NightTime", nightTime.ToString()}
	            });
    
		}




		public void Specially(
			ConsoleApplication1.Loggers.Special special)
		{
			Sample.Current.Specially(
				special
			);

			System.Diagnostics.Debug.WriteLine($"[Console] ERR: Specially");
           
			System.Diagnostics.Debug.WriteLine($"\tspecial.ToString():\t{special.ToString()}");
			_telemetryClient.TrackEvent(
	            nameof(Specially),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"Special", special.ToString()}
	            });
    
		}




		public void StartHello(
			)
		{
			Sample.Current.StartHello(
				
			);

			System.Diagnostics.Debug.WriteLine($"[Console] ERR: StartHello");
           
			_helloStopwatch.Restart();
            var helloOperationHolder = _telemetryClient.StartOperation<RequestTelemetry>("hello");
	       
	       OperationHolder.StartOperation(helloOperationHolder);
    
		}

		private System.Diagnostics.Stopwatch _helloStopwatch = new System.Diagnostics.Stopwatch();



		public void StopHello(
			)
		{
			Sample.Current.StopHello(
				
			);

			System.Diagnostics.Debug.WriteLine($"[Console] ERR: StopHello");
           
			_helloStopwatch.Stop();
	        var helloOperationHolder = OperationHolder.StopOperation();
	        _telemetryClient.StopOperation(helloOperationHolder);
	        helloOperationHolder.Dispose();
    
		}




	}
}
