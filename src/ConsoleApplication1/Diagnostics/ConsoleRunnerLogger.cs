/*******************************************************************************************
*  This class is autogenerated from the class ConsoleRunnerLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using ConsoleApplication1.Loggers;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;


namespace ConsoleApplication1.Diagnostics
{
	internal sealed class ConsoleRunnerLogger : IConsoleRunnerLogger
	{
		private readonly int _processId;
		private readonly string _machineName;
		// Hello from extension
		private readonly Microsoft.ApplicationInsights.TelemetryClient _telemetryClient;

		public ConsoleRunnerLogger(
			int processId,
			string machineName)
		{
			_processId = processId;
			_machineName = machineName;
			// Do stuff in the constructor
			_telemetryClient.Context.User.Id = Environment.UserName;
            _telemetryClient.Context.Session.Id = Guid.NewGuid().ToString();
            _telemetryClient.Context.Device.OperatingSystem = Environment.OSVersion.ToString();

		}

		public void RunnerCreated(
			)
		{
			Sample.Current.RunnerCreated(
				_processId, 
				_machineName
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner] ERR: RunnerCreated");
           
			System.Diagnostics.Debug.WriteLine($"\t_processId:\t{_processId}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			_telemetryClient.TrackEvent(
	            nameof(RunnerCreated),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"processId", _processId.ToString()},
                    {"machineName", _machineName}
	            });
    
		}




		public void RunnerDestroyed(
			)
		{
			Sample.Current.RunnerDestroyed(
				_processId, 
				_machineName
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner] ERR: RunnerDestroyed");
           
			System.Diagnostics.Debug.WriteLine($"\t_processId:\t{_processId}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			_telemetryClient.TrackEvent(
	            nameof(RunnerDestroyed),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"processId", _processId.ToString()},
                    {"machineName", _machineName}
	            });
    
		}




		public void WaitingForKeyPress(
			)
		{
			Sample.Current.WaitingForKeyPress(
				_processId, 
				_machineName
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner] ERR: WaitingForKeyPress");
           
			System.Diagnostics.Debug.WriteLine($"\t_processId:\t{_processId}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			_telemetryClient.TrackEvent(
	            nameof(WaitingForKeyPress),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"processId", _processId.ToString()},
                    {"machineName", _machineName}
	            });
    
		}




		public void KeyPressed(
			System.ConsoleKey key)
		{
			Sample.Current.KeyPressed(
				_processId, 
				_machineName, 
				key
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner] ERR: KeyPressed");
           
			System.Diagnostics.Debug.WriteLine($"\t_processId:\t{_processId}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			System.Diagnostics.Debug.WriteLine($"\tkey.ToString():\t{key.ToString()}");
			_telemetryClient.TrackEvent(
	            nameof(KeyPressed),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"processId", _processId.ToString()},
                    {"machineName", _machineName},
                    {"keystring", key.ToString()}
	            });
    
		}




		public void UnsupportedKeyError(
			System.Exception ex)
		{
			Sample.Current.UnsupportedKeyError(
				_processId, 
				_machineName, 
				ex
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner, Error] ERR: UnsupportedKeyError");
           
			System.Diagnostics.Debug.WriteLine($"\t_processId:\t{_processId}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			System.Diagnostics.Debug.WriteLine($"\tex.Message:\t{ex.Message}");
			System.Diagnostics.Debug.WriteLine($"\tex.Source:\t{ex.Source}");
			System.Diagnostics.Debug.WriteLine($"\tex.GetType().FullName:\t{ex.GetType().FullName}");
			System.Diagnostics.Debug.WriteLine($"\tex.AsJson():\t{ex.AsJson()}");
			_telemetryClient.TrackException(
	            ex,
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
                    { "Name", "UnsupportedKeyError" },
	                {"processId", _processId.ToString()},
                    {"machineName", _machineName},
                    {"messagestring", ex.Message},
                    {"sourcestring", ex.Source},
                    {"exceptionTypeNamestring", ex.GetType().FullName},
                    {"exceptionstring", ex.AsJson()}
	            });
    
		}




		public void StartLoop(
			)
		{
			Sample.Current.StartLoop(
				_processId, 
				_machineName
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner] ERR: StartLoop");
           
			System.Diagnostics.Debug.WriteLine($"\t_processId:\t{_processId}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			_loopStopwatch.Restart();
            _loopOperationHolder = _telemetryClient.StartOperation<RequestTelemetry>("loop");
	       _loopOperationHolder.Telemetry.Properties.Add("processId", _processId.ToString());
			_loopOperationHolder.Telemetry.Properties.Add("machineName", _machineName);
    
		}

		private System.Diagnostics.Stopwatch _loopStopwatch = new System.Diagnostics.Stopwatch();

		private IOperationHolder<RequestTelemetry> _loopOperationHolder;


		public void StopLoop(
			)
		{
			Sample.Current.StopLoop(
				_processId, 
				_machineName
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner] ERR: StopLoop");
           
			System.Diagnostics.Debug.WriteLine($"\t_processId:\t{_processId}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			_loopStopwatch.Stop();
            _telemetryClient.StopOperation(_loopOperationHolder);
	            _loopOperationHolder.Dispose();
    
		}




		public void RandomIntsGenerated(
			int[] values)
		{
			Sample.Current.RandomIntsGenerated(
				_processId, 
				_machineName, 
				values
			);

			System.Diagnostics.Debug.WriteLine($"[ConsoleRunner] ERR: RandomIntsGenerated");
           
			System.Diagnostics.Debug.WriteLine($"\t_processId:\t{_processId}");
			System.Diagnostics.Debug.WriteLine($"\tEnvironment.MachineName:\t{Environment.MachineName}");
			System.Diagnostics.Debug.WriteLine($"\tvalues.ToString():\t{values.ToString()}");
			_telemetryClient.TrackEvent(
	            nameof(RandomIntsGenerated),
	            new System.Collections.Generic.Dictionary<string, string>()
	            {
	                {"processId", _processId.ToString()},
                    {"machineName", _machineName},
                    {"valuesstring", values.ToString()}
	            });
    
		}




	}
}
