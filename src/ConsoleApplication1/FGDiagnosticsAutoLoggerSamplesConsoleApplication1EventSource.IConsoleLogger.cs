/*******************************************************************************************
*  This class is autogenerated from the class ConsoleLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Threading.Tasks;

namespace FG.Diagnostics.AutoLogger.Samples.ConsoleApplication1
{
	internal sealed partial class FGDiagnosticsAutoLoggerSamplesConsoleApplication1EventSource
	{

		private const int SayHelloEventId = 1001;

		[Event(SayHelloEventId, Level = EventLevel.LogAlways, Message = "{2}", Keywords = Keywords.Console)]
		public void SayHello(
			bool autogenerated, 
			string machineName, 
			string message)
		{
			WriteEvent(
				SayHelloEventId, 
				autogenerated, 
				machineName, 
				message);
		}


		private const int MessageEventId = 1002;

		[Event(MessageEventId, Level = EventLevel.LogAlways, Message = "{2}", Keywords = Keywords.Console)]
		public void Message(
			bool autogenerated, 
			string machineName, 
			string message)
		{
			WriteEvent(
				MessageEventId, 
				autogenerated, 
				machineName, 
				message);
		}


		private const int ErrorEventId = 1003;

		[Event(ErrorEventId, Level = EventLevel.LogAlways, Message = "{2}", Keywords = Keywords.Console | Keywords.Error)]
		private void Error(
			bool autogenerated, 
			string machineName, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				ErrorEventId, 
				autogenerated, 
				machineName, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void Error(
			bool autogenerated, 
			string machineName, 
			System.Exception exception)
		{
			if (this.IsEnabled())
			{
				Error(
					autogenerated, 
					Environment.MachineName, 
					exception.Message, 
					exception.Source, 
					exception.GetType().FullName, 
					exception.AsJson());
			}
		}


		private const int SayGoodbyeEventId = 1004;

		[Event(SayGoodbyeEventId, Level = EventLevel.LogAlways, Message = "Say Goodbye {2} {3}", Keywords = Keywords.Console)]
		private void SayGoodbye(
			bool autogenerated, 
			string machineName, 
			string goodbye, 
			string nightTime)
		{
			WriteEvent(
				SayGoodbyeEventId, 
				autogenerated, 
				machineName, 
				goodbye, 
				nightTime);
		}

		[NonEvent]
		public void SayGoodbye(
			bool autogenerated, 
			string machineName, 
			string goodbye, 
			System.DateTime nightTime)
		{
			if (this.IsEnabled())
			{
				SayGoodbye(
					autogenerated, 
					Environment.MachineName, 
					goodbye, 
					nightTime.ToString());
			}
		}


		private const int SpeciallyEventId = 1005;

		[Event(SpeciallyEventId, Level = EventLevel.LogAlways, Message = "Specially {2}", Keywords = Keywords.Console)]
		private void Specially(
			bool autogenerated, 
			string machineName, 
			int A, 
			string B, 
			System.DateTime C)
		{
			WriteEvent(
				SpeciallyEventId, 
				autogenerated, 
				machineName, 
				A, 
				B, 
				C);
		}

		[NonEvent]
		public void Specially(
			bool autogenerated, 
			string machineName, 
			FG.Diagnostics.AutoLogger.Samples.ConsoleApplication1.Loggers.Special special)
		{
			if (this.IsEnabled())
			{
				Specially(
					autogenerated, 
					Environment.MachineName, 
					special.A, 
					special.B, 
					special.C);
			}
		}


		private const int StartHelloEventId = 1006;

		[Event(StartHelloEventId, Level = EventLevel.LogAlways, Message = "Start Hello", Keywords = Keywords.Console, Opcode = EventOpcode.Start)]
		public void StartHello(
			bool autogenerated, 
			string machineName)
		{
			WriteEvent(
				StartHelloEventId, 
				autogenerated, 
				machineName);
		}


		private const int StopHelloEventId = 1007;

		[Event(StopHelloEventId, Level = EventLevel.LogAlways, Message = "Stop Hello", Keywords = Keywords.Console, Opcode = EventOpcode.Stop)]
		public void StopHello(
			bool autogenerated, 
			string machineName)
		{
			WriteEvent(
				StopHelloEventId, 
				autogenerated, 
				machineName);
		}


		private const int LogOtherObjectEventId = 1008;

		[Event(LogOtherObjectEventId, Level = EventLevel.LogAlways, Message = "Log Other Object {2}", Keywords = Keywords.Console)]
		private void LogOtherObject(
			bool autogenerated, 
			string machineName, 
			string TheValue)
		{
			WriteEvent(
				LogOtherObjectEventId, 
				autogenerated, 
				machineName, 
				TheValue);
		}

		[NonEvent]
		public void LogOtherObject(
			bool autogenerated, 
			string machineName, 
			FG.Diagnostics.AutoLogger.Samples.ConsoleApplication1.Loggers.OtherDataCarryingObject data)
		{
			if (this.IsEnabled())
			{
				LogOtherObject(
					autogenerated, 
					Environment.MachineName, 
					data.TheValue);
			}
		}


	}
}