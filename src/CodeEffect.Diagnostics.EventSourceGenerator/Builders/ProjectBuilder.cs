using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml;
using FG.Diagnostics.AutoLogger.Generator.Utils;
using FG.Diagnostics.AutoLogger.Model;

namespace FG.Diagnostics.AutoLogger.Generator.Builders
{
    public class ProjectBuilder : BaseCoreBuilder, IProjectBuilder
    {
        public void Build(Project model)
        {
            LogMessage($"Scanning project {model.ProjectFilePath} for eventsource definitions");

            model.ProjectBasePath = System.IO.Path.GetDirectoryName(model.ProjectFilePath);

            var projectItems = new List<ProjectItem>();

            if (model.ProjectFilePath == null)
            {
                LogMessage($"Could not find basePath of {model.ProjectFilePath}");
            }
            if (model.ProjectBasePath != null)
            {
                var projectName = System.IO.Path.GetFileNameWithoutExtension(model.ProjectFilePath);
                var configuration = "Debug";
                var projectTool = new FG.Utils.BuildTools.ProjectTool(model.ProjectFilePath, null);
                var projectFiles = projectTool.ScanFilesInProjectFolder();
                var projectReferences = projectTool.GetProjectReferences();
                var projectProperties = projectTool.GetProjectProperties(configuration, model.Platform);
                LogMessage($"Loaded project {model.ProjectFilePath} from XML with {projectFiles.Count()} items");


                var rootNamespace = projectProperties.ContainsKey("RootNamespace") ? projectProperties["RootNamespace"] : projectName;
                var assemblyName = projectProperties.ContainsKey("AssemblyName") ? projectProperties["AssemblyName"] : projectName;
                model.RootNamespace = rootNamespace;
                model.AssemblyName = assemblyName;

                var hasEventSource = false;
                foreach (var projectItem in projectFiles.Where(item => 
                    item.Name.EndsWith(@".eventsource.json", StringComparison.InvariantCultureIgnoreCase)))
                {

                    projectItems.Add(new ProjectItem<EventSourceModel>(ProjectItemType.EventSourceDefinition, projectItem.Path)
                    {
                        Include = projectItem.Name,
                        RootNamespace = rootNamespace,
                        AssemblyName = assemblyName,
                    });
                    hasEventSource = true;
                }

                foreach (var projectItem in projectFiles.Where(item =>
                    item.Name.Matches(@"*.eventsource.output.json", StringComparison.InvariantCultureIgnoreCase, useWildcards: true)
                    && item.IncludeType == "Content"))
                {
                    var projectItemFilePath = projectItem.Path;
                    projectItems.Add(new ProjectItem<ProjectSummary>(ProjectItemType.ProjectSummary, projectItemFilePath)
                    {
                        Include = projectItem.Name,
                    });
                }

                var autogeneratedMetadataTypes = new[]
                    {
                        ProjectItemType.ProjectSummary,
                        ProjectItemType.DefaultGeneratedEventSourceDefinition,
                        ProjectItemType.EventSource,
                        ProjectItemType.EventSourceLoggerPartial,
                        ProjectItemType.LoggerImplementation
                    }
                    .Select(metadata => Enum.GetName(typeof(ProjectItemType), metadata))
                    .ToArray();
                foreach (var projectItem in projectFiles.Where(item =>
                    item.Name.Matches(@"(^|\\)I[^\\]*Logger.cs", StringComparison.InvariantCultureIgnoreCase, useWildcards: false)
                    && item.IncludeType == "Compile"
                    && !autogeneratedMetadataTypes.Contains((item.Properties.ContainsKey("AutoGenerated") ? item.Properties["AutoGenerated"] : "") ?? "")))
                {
                    var projectItemFilePath = projectItem.Path;
                    projectItems.Add(new ProjectItem<LoggerTemplateModel>(ProjectItemType.LoggerInterface, projectItemFilePath) {Include = projectItem.Name});
                }

                foreach (var projectItem in projectFiles.Where(item =>
                    item.Name.Matches(@"(^|\\)[^\\]*Extension.cs", StringComparison.InvariantCultureIgnoreCase, useWildcards: false)
                    && item.IncludeType == "Compile"
                    && !autogeneratedMetadataTypes.Contains((item.Properties.ContainsKey("AutoGenerated") ? item.Properties["AutoGenerated"] : "") ?? "")))
                {
                    var projectItemFilePath = projectItem.Path;
                    projectItems.Add(new ProjectItem(ProjectItemType.BuilderExtension, projectItemFilePath) {Include = projectItem.Name});
                }

                var outputPath = projectProperties.ContainsKey("OutputPath") ? projectProperties["OutputPath"] : $"bin\\{configuration}";
                var buildOutputPath = PathExtensions.GetAbsolutePath(model.ProjectBasePath, outputPath);
                if (System.IO.Directory.Exists(buildOutputPath))
                {
                    var outputFiles = System.IO.Directory.GetFiles(buildOutputPath, "*.*", SearchOption.AllDirectories);
                    foreach (var outputFile in outputFiles)
                    {
                        var outputFileType = System.IO.Path.GetExtension(outputFile);
                        if (outputFileType == ".dll" || outputFileType == ".exe")
                        {
                            var referenceFilePath = outputFile;
                            var referenceName = System.IO.Path.GetFileNameWithoutExtension(outputFile);
                            projectItems.Add(new ProjectItem(ProjectItemType.Reference, referenceFilePath) { Include = referenceName });
                        }
                    }
                }

                if (!hasEventSource)
                {
                    var defaultEventSourceName = $"{assemblyName}EventSource";
                    defaultEventSourceName = defaultEventSourceName.RemoveNonWordCharacters();

                    var include = $"{defaultEventSourceName}.eventsource.json";
                    var projectItemFilePath = System.IO.Path.Combine(model.ProjectBasePath, include);
                    projectItems.Add(new ProjectItem<EventSourceModel>(ProjectItemType.DefaultGeneratedEventSourceDefinition, projectItemFilePath)
                    {                        
                        Include = include,
                        RootNamespace = rootNamespace,
                        AssemblyName = assemblyName,
                    });
                }
            }

            model.ProjectItems = projectItems.ToArray();
        }
    }
}