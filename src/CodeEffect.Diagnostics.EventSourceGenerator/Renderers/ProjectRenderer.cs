using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using CodeEffect.Diagnostics.EventSourceGenerator.Model;
using CodeEffect.Diagnostics.EventSourceGenerator.Utils;

namespace CodeEffect.Diagnostics.EventSourceGenerator.Renderers
{
    public class ProjectRenderer : BaseWithLogging, IProjectRenderer
    {
        public bool SaveChanges { get; set; }

        public void Render(Project model)
        {
            AddGeneratedOutputsToProject(model, this.SaveChanges);
        }

        private void AddGeneratedOutputsToProject(Project model, bool saveChanges = true)
        {
            var projectFilePath = model.ProjectFilePath;
            var includes = model.ProjectItems.Where(p => p.ItemType != ProjectItemType.Reference && p.ItemType != ProjectItemType.Unknown);

            LogMessage($"Loading projectfile {projectFilePath} to include new files");
            Microsoft.Build.Evaluation.Project project = null;
            var updatedProjectFile = false;
            var loadedFromProjectCollection = false;

            foreach (var loadedProject in Microsoft.Build.Evaluation.ProjectCollection.GlobalProjectCollection.LoadedProjects)
            {
                if (loadedProject.FullPath.Equals(projectFilePath, StringComparison.InvariantCultureIgnoreCase))
                {
                    project = loadedProject;
                    LogMessage($"Loaded project {projectFilePath} from GlobalProjectCollection with {project.Items.Count} items");
                    loadedFromProjectCollection = true;
                    break;
                }
            }
            if (project == null)
            {
                using (var projectFileReader = XmlReader.Create(projectFilePath))
                {
                    project = new Microsoft.Build.Evaluation.Project(projectFileReader);
                    LogMessage($"Loaded project {projectFilePath} from XML with {project.Items.Count} items");
                }
            }
            if (project == null)
            {
                throw new NotSupportedException($"Failed to load {projectFilePath} from either XML or GlobalProjectCollection");
            }

            // Set the project summary hash
            if (model.HasProjectChanges)
            {
                var summaryHash = project.SetProperty("EventSourceGeneratorSummaryHash", model.SummaryHash);
                updatedProjectFile = true;
            }

            var existingItems = new List<Microsoft.Build.Evaluation.ProjectItem>();
            existingItems.AddRange(project.Items.Where(item => item.HasMetadata("AutoGenerated")));

            // Add or check that it already exists
            foreach (var include in includes)
            {
                var includeName = model.GetIncludeName(include);

                var alreadyIncluded = false;
                var matchingItems = project.Items.Where(item => item.EvaluatedInclude.Matches($"{includeName}", StringComparison.InvariantCultureIgnoreCase));
                alreadyIncluded = matchingItems.Any();
                if (!alreadyIncluded)
                {
                    var metadata = Enum.GetName(typeof(ProjectItemType), include.ItemType);
                    updatedProjectFile = true;
                    IList<Microsoft.Build.Evaluation.ProjectItem> addedItems = null;
                    if (include.ItemType == ProjectItemType.DefaultGeneratedEventSourceDefinition)
                    {
                        var hash = include.Output.ToMD5().ToHex();
                        addedItems = project.AddItem("Compile", includeName, new KeyValuePair<string, string>[]
                        {
                            new KeyValuePair<string, string>("AutoGenerated", metadata),
                            new KeyValuePair<string, string>("Hash", hash),
                        });
                    }
                    else
                    {
                        addedItems = project.AddItem("Compile", includeName, new KeyValuePair<string, string>[]
                        {
                        new KeyValuePair<string, string>("AutoGen", "true"),
                        new KeyValuePair<string, string>("AutoGenerated", metadata),
                        new KeyValuePair<string, string>("DependentUpon", include.DependentUpon.Include.RemoveCommonPrefix(includeName, System.IO.Path.DirectorySeparatorChar)),
                        });
                    }

                    foreach (var addedItem in addedItems)
                    {
                        LogMessage($"Including project item {addedItem.EvaluatedInclude}");
                        existingItems.Remove(addedItem);
                    }
                }
                else
                {
                    foreach (var matchingItem in matchingItems)
                    {
                        LogMessage($"Matched existing project item {matchingItem.EvaluatedInclude}");
                        existingItems.Remove(matchingItem);
                    }
                }
            }
            // Check if we should remove the AutoGenerated DefaultEventSource.eventsource
            var autoGeneratedDefaultEventSource = existingItems.FirstOrDefault(
                existingItem => existingItem.HasMetadata("AutoGenerated") && existingItem.GetMetadataValue("AutoGenerated") == "DefaultEventSource");
            if (autoGeneratedDefaultEventSource != null)
            {
                if (autoGeneratedDefaultEventSource.EvaluatedInclude != "DefaultEventSource.cs")
                {
                    updatedProjectFile = true;
                    LogMessage($"Updating Project Metadata for {autoGeneratedDefaultEventSource.EvaluatedInclude} as it has been changed from it's original state");
                    autoGeneratedDefaultEventSource.RemoveMetadata("AutoGenerated");
                    existingItems.Remove(autoGeneratedDefaultEventSource);
                }
                else
                {
                    var hash = autoGeneratedDefaultEventSource.HasMetadata("Hash") ? autoGeneratedDefaultEventSource.GetMetadataValue("Hash") : "";

                    var filePath = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(projectFilePath), autoGeneratedDefaultEventSource.EvaluatedInclude);
                    var fileContent = System.IO.File.ReadAllText(filePath);

                    var hashCheck = fileContent.ToMD5().ToHex();

                    if (hash != hashCheck)
                    {
                        updatedProjectFile = true;
                        LogMessage($"Updating Project Metadata for {autoGeneratedDefaultEventSource.EvaluatedInclude} as it's content been changed from it's original state");
                        autoGeneratedDefaultEventSource.RemoveMetadata("AutoGenerated");
                        existingItems.Remove(autoGeneratedDefaultEventSource);
                    }
                }
            }

            // Remove old items that are no longer referenced
            foreach (var existingItem in existingItems)
            {
                LogMessage($"Removing existing project item {existingItem.EvaluatedInclude}");
            }
            if (existingItems.Count > 0)
            {
                updatedProjectFile = true;
                project.RemoveItems(existingItems);
            }

            if (!updatedProjectFile)
            {
                LogMessage($"Igoring to save project file {projectFilePath} - no changes performed");
            }
            else
            {
                if (saveChanges)
                {
                    if (loadedFromProjectCollection)
                    {
                        LogMessage($"Unloading project file {projectFilePath} from Global project collection");
                        Microsoft.Build.Evaluation.ProjectCollection.GlobalProjectCollection.UnloadProject(project);
                    }
                    LogMessage($"Saving project file {projectFilePath}");
                    project.Save(projectFilePath);
                    LogMessage($"Loading project file {projectFilePath} in Global project collection");
                    Microsoft.Build.Evaluation. ProjectCollection.GlobalProjectCollection.LoadProject(projectFilePath);
                }
                else
                {
                    LogMessage($"Project file {projectFilePath} changed");
                    LogMessage(project.Xml.RawXml);
                }
            }
        }
    }
}